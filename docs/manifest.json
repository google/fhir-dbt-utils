{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.6", "generated_at": "2023-11-15T13:13:30.729177Z", "invocation_id": "a45b6a71-9a55-49f6-bf85-d49786a47841", "env": {}, "project_name": "dbt_dataset", "project_id": "3267af100f3e7d58456cda794576c67e", "user_id": "e3807597-a895-4cfd-9354-4f4a3dc452f7", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.fhir_dbt_utils.MedicationStatement": {"database": "dbt_project", "schema": "dbt_dataset", "name": "MedicationStatement", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/MedicationStatement.sql", "original_file_path": "models/fhir_resources/MedicationStatement.sql", "unique_id": "model.fhir_dbt_utils.MedicationStatement", "fqn": ["fhir_dbt_utils", "fhir_resources", "MedicationStatement"], "alias": "MedicationStatement", "checksum": {"name": "sha256", "checksum": "b02bbeefdcfad174b4f8691ea1d9c538627a37b1bad7c4c3cbba7df8512cff2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of MedicationStatement FHIR resource", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationStatement", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of MedicationStatement FHIR resource", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "MedicationStatement", "meta": {"description": "View of MedicationStatement FHIR resource", "fhir_resource": "MedicationStatement", "metric_date_columns": ["dateAsserted"], "patient_reference_column": "subject"}}, "created_at": 1700054013.0743854, "relation_name": "`dbt_project`.`dbt_dataset`.`MedicationStatement`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"MedicationStatement\",\n    meta = {\n      \"description\": \"View of MedicationStatement FHIR resource\",\n      \"fhir_resource\": \"MedicationStatement\",\n      \"metric_date_columns\": [\"dateAsserted\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/MedicationStatement.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.ImagingStudy": {"database": "dbt_project", "schema": "dbt_dataset", "name": "ImagingStudy", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/ImagingStudy.sql", "original_file_path": "models/fhir_resources/ImagingStudy.sql", "unique_id": "model.fhir_dbt_utils.ImagingStudy", "fqn": ["fhir_dbt_utils", "fhir_resources", "ImagingStudy"], "alias": "ImagingStudy", "checksum": {"name": "sha256", "checksum": "72263bd229cb3b773bb909509c16f7d2d4014c863a46176af4b79a5d3bbb1cdf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of ImagingStudy FHIR resource", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "ImagingStudy", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of ImagingStudy FHIR resource", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "ImagingStudy", "meta": {"description": "View of ImagingStudy FHIR resource", "fhir_resource": "ImagingStudy", "metric_date_columns": ["started"], "patient_reference_column": "subject"}}, "created_at": 1700054013.120224, "relation_name": "`dbt_project`.`dbt_dataset`.`ImagingStudy`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"ImagingStudy\",\n    meta = {\n      \"description\": \"View of ImagingStudy FHIR resource\",\n      \"fhir_resource\": \"ImagingStudy\",\n      \"metric_date_columns\": [\"started\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/ImagingStudy.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    IF(\n      CHAR_LENGTH(started) = 10,\n      \n    safe_cast(started as date)\n,\n      DATE(\n    safe_cast(started as TIMESTAMP)\n, 'America/New_York')\n    ) AS metric_date,\n    IF(\n      CHAR_LENGTH(started) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(started as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`imaging_study`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.MedicationDispense": {"database": "dbt_project", "schema": "dbt_dataset", "name": "MedicationDispense", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/MedicationDispense.sql", "original_file_path": "models/fhir_resources/MedicationDispense.sql", "unique_id": "model.fhir_dbt_utils.MedicationDispense", "fqn": ["fhir_dbt_utils", "fhir_resources", "MedicationDispense"], "alias": "MedicationDispense", "checksum": {"name": "sha256", "checksum": "4894ad85518d40be934f6046072a17283f703905aca766348d9ca40da32ba1a1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of MedicationDisepense FHIR resource", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationDispense", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of MedicationDisepense FHIR resource", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "MedicationDispense", "meta": {"description": "View of MedicationDisepense FHIR resource", "fhir_resource": "MedicationDispense", "metric_date_columns": ["whenPrepared"], "patient_reference_column": "subject"}}, "created_at": 1700054013.1342778, "relation_name": "`dbt_project`.`dbt_dataset`.`MedicationDispense`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"MedicationDispense\",\n    meta = {\n      \"description\": \"View of MedicationDisepense FHIR resource\",\n      \"fhir_resource\": \"MedicationDispense\",\n      \"metric_date_columns\": [\"whenPrepared\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/MedicationDispense.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.DiagnosticReport": {"database": "dbt_project", "schema": "dbt_dataset", "name": "DiagnosticReport", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/DiagnosticReport.sql", "original_file_path": "models/fhir_resources/DiagnosticReport.sql", "unique_id": "model.fhir_dbt_utils.DiagnosticReport", "fqn": ["fhir_dbt_utils", "fhir_resources", "DiagnosticReport"], "alias": "DiagnosticReport", "checksum": {"name": "sha256", "checksum": "ecc3f079db75b41f3161fed845569f1e8ec4573b3436c6896eddcbb8c1530c90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of DiagnosticReport FHIR resource", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "DiagnosticReport", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of DiagnosticReport FHIR resource", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "DiagnosticReport", "meta": {"description": "View of DiagnosticReport FHIR resource", "fhir_resource": "DiagnosticReport", "metric_date_columns": ["issued"], "patient_reference_column": "subject"}}, "created_at": 1700054013.1441255, "relation_name": "`dbt_project`.`dbt_dataset`.`DiagnosticReport`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"DiagnosticReport\",\n    meta = {\n      \"description\": \"View of DiagnosticReport FHIR resource\",\n      \"fhir_resource\": \"DiagnosticReport\",\n      \"metric_date_columns\": [\"issued\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/DiagnosticReport.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    DATE(issued, 'America/New_York') AS metric_date,\n    TIMESTAMP_TRUNC(issued, hour, 'America/New_York') AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`diagnostic_report`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.DocumentReference": {"database": "dbt_project", "schema": "dbt_dataset", "name": "DocumentReference", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/DocumentReference.sql", "original_file_path": "models/fhir_resources/DocumentReference.sql", "unique_id": "model.fhir_dbt_utils.DocumentReference", "fqn": ["fhir_dbt_utils", "fhir_resources", "DocumentReference"], "alias": "DocumentReference", "checksum": {"name": "sha256", "checksum": "6dccbfffe9c54a7d06a5ab54030f559073a917c8331ec48eb844163f9a1a3a46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of DocumentReference FHIR resource", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "DocumentReference", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of DocumentReference FHIR resource", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "DocumentReference", "meta": {"description": "View of DocumentReference FHIR resource", "fhir_resource": "DocumentReference", "metric_date_columns": ["date"], "patient_reference_column": "subject"}}, "created_at": 1700054013.1536925, "relation_name": "`dbt_project`.`dbt_dataset`.`DocumentReference`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"DocumentReference\",\n    meta = {\n      \"description\": \"View of DocumentReference FHIR resource\",\n      \"fhir_resource\": \"DocumentReference\",\n      \"metric_date_columns\": [\"date\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/DocumentReference.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Practitioner": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Practitioner", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Practitioner.sql", "original_file_path": "models/fhir_resources/Practitioner.sql", "unique_id": "model.fhir_dbt_utils.Practitioner", "fqn": ["fhir_dbt_utils", "fhir_resources", "Practitioner"], "alias": "Practitioner", "checksum": {"name": "sha256", "checksum": "4892b7e0b6af34b2aa79596854a6f7ee50849919546b018cfffea8e39c8a60ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Practitioner FHIR resource", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Practitioner", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Practitioner FHIR resource", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Practitioner", "meta": {"description": "View of Practitioner FHIR resource", "fhir_resource": "Practitioner", "metric_date_columns": null, "patient_reference_column": null}}, "created_at": 1700054013.1663585, "relation_name": "`dbt_project`.`dbt_dataset`.`Practitioner`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Practitioner\",\n    meta = {\n      \"description\": \"View of Practitioner FHIR resource\",\n      \"fhir_resource\": \"Practitioner\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Practitioner.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    \n    CAST(NULL AS DATE) AS metric_date,\n    \n    CAST(NULL AS TIMESTAMP) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`practitioner`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Patient": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Patient", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Patient.sql", "original_file_path": "models/fhir_resources/Patient.sql", "unique_id": "model.fhir_dbt_utils.Patient", "fqn": ["fhir_dbt_utils", "fhir_resources", "Patient"], "alias": "Patient", "checksum": {"name": "sha256", "checksum": "a6818ffc872cfd01b2dee4826fa288609fd5d0b1dbd03ff37e3380a395b1fdbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Patient FHIR resource", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Patient", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Patient FHIR resource", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Patient", "meta": {"description": "View of Patient FHIR resource", "fhir_resource": "Patient", "metric_date_columns": null, "patient_reference_column": null}}, "created_at": 1700054013.1787546, "relation_name": "`dbt_project`.`dbt_dataset`.`Patient`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Patient\",\n    meta = {\n      \"description\": \"View of Patient FHIR resource\",\n      \"fhir_resource\": \"Patient\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Patient.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    \n    CAST(NULL AS DATE) AS metric_date,\n    \n    CAST(NULL AS TIMESTAMP) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`patient`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Composition": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Composition", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Composition.sql", "original_file_path": "models/fhir_resources/Composition.sql", "unique_id": "model.fhir_dbt_utils.Composition", "fqn": ["fhir_dbt_utils", "fhir_resources", "Composition"], "alias": "Composition", "checksum": {"name": "sha256", "checksum": "3db13c4edbc2466d765deeb16393c384d15282bd436c25fe8caef102d5edd5ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Composition FHIR resource", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Composition", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Composition FHIR resource", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Composition", "meta": {"description": "View of Composition FHIR resource", "fhir_resource": "Composition", "metric_date_columns": ["date"], "patient_reference_column": "subject"}}, "created_at": 1700054013.1959834, "relation_name": "`dbt_project`.`dbt_dataset`.`Composition`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Composition\",\n    meta = {\n      \"description\": \"View of Composition FHIR resource\",\n      \"fhir_resource\": \"Composition\",\n      \"metric_date_columns\": [\"date\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Composition.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.ServiceRequest": {"database": "dbt_project", "schema": "dbt_dataset", "name": "ServiceRequest", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/ServiceRequest.sql", "original_file_path": "models/fhir_resources/ServiceRequest.sql", "unique_id": "model.fhir_dbt_utils.ServiceRequest", "fqn": ["fhir_dbt_utils", "fhir_resources", "ServiceRequest"], "alias": "ServiceRequest", "checksum": {"name": "sha256", "checksum": "ff544b019384e7b95e2fcad6ce35b8d310602637b0fe9fa30afcd2651ac22ddd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of ServiceRequest FHIR resource", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "ServiceRequest", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of ServiceRequest FHIR resource", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "ServiceRequest", "meta": {"description": "View of ServiceRequest FHIR resource", "fhir_resource": "ServiceRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}}, "created_at": 1700054013.21109, "relation_name": "`dbt_project`.`dbt_dataset`.`ServiceRequest`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"ServiceRequest\",\n    meta = {\n      \"description\": \"View of ServiceRequest FHIR resource\",\n      \"fhir_resource\": \"ServiceRequest\",\n      \"metric_date_columns\": [\"authoredOn\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/ServiceRequest.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Procedure": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Procedure", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Procedure.sql", "original_file_path": "models/fhir_resources/Procedure.sql", "unique_id": "model.fhir_dbt_utils.Procedure", "fqn": ["fhir_dbt_utils", "fhir_resources", "Procedure"], "alias": "Procedure", "checksum": {"name": "sha256", "checksum": "0891ad5d2ef628fd9a5f4de20d8f877a1d39577d5ae543af9fa199beca8a0363"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Procedure FHIR resource", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Procedure", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Procedure FHIR resource", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Procedure", "meta": {"description": "View of Procedure FHIR resource", "fhir_resource": "Procedure", "metric_date_columns": ["performed.period.start", "performed.dateTime"], "patient_reference_column": "subject"}}, "created_at": 1700054013.2236774, "relation_name": "`dbt_project`.`dbt_dataset`.`Procedure`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Procedure\",\n    meta = {\n      \"description\": \"View of Procedure FHIR resource\",\n      \"fhir_resource\": \"Procedure\",\n      \"metric_date_columns\": [\"performed.period.start\", \"performed.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Procedure.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    IF(\n      CHAR_LENGTH(COALESCE(performed.period.start, performed.dateTime)) = 10,\n      \n    safe_cast(COALESCE(performed.period.start, performed.dateTime) as date)\n,\n      DATE(\n    safe_cast(COALESCE(performed.period.start, performed.dateTime) as TIMESTAMP)\n, 'America/New_York')\n    ) AS metric_date,\n    IF(\n      CHAR_LENGTH(COALESCE(performed.period.start, performed.dateTime)) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(COALESCE(performed.period.start, performed.dateTime) as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`procedure`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.fhir_table_list": {"database": "dbt_project", "schema": "dbt_dataset", "name": "fhir_table_list", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/fhir_table_list.sql", "original_file_path": "models/fhir_resources/fhir_table_list.sql", "unique_id": "model.fhir_dbt_utils.fhir_table_list", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir_table_list"], "alias": "fhir_table_list", "checksum": {"name": "sha256", "checksum": "10a057ee96e4dba11f51951f611cab70c306c519daceb670c839a78e76f8ec70"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "List of FHIR resource tables present in the database"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "fhir_table_list", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "List of FHIR resource tables present in the database"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "fhir_table_list", "meta": {"description": "List of FHIR resource tables present in the database"}}, "created_at": 1700054013.2342126, "relation_name": "`dbt_project`.`dbt_dataset`.`fhir_table_list`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n{{- config(\n    name = \"fhir_table_list\",\n    meta = {\n      \"description\": \"List of FHIR resource tables present in the database\"\n      },\n    materialized = 'table'\n) -}}\n\n{% if is_spark() %}\n\n  {%- set path_prefix='fhir_resources/' %}\n  {%- set fhir_resources={} %}\n  {%- for node in graph.nodes.values()\n       if node.resource_type == 'model'\n       and node.path.startswith(path_prefix)\n       and not node.path.endswith('_view.sql') %}\n    {%- set fhir_resource = node.path[path_prefix|length : -4] %}\n    {% if var('snake_case_fhir_tables') %}\n        {%- set table_name = fhir_dbt_utils.camel_case_to_snake_case(fhir_resource) %}\n    {% else %}\n        {%- set table_name = fhir_resource %}\n    {% endif %}\n    {%- if adapter.get_relation(\n      database = var('database'),\n      schema = var('schema'),\n      identifier = table_name) %}\n      {%- do fhir_resources.update({fhir_resource: table_name}) %}\n    {%- endif %}\n  {%- endfor %}\n\n  {%- for fhir_resource, table_name in fhir_resources.items() %}\nSELECT\n  '{{ fhir_resource }}' AS fhir_resource,\n  NULL as bq_project,\n  NULL as bq_dataset,\n  '{{ table_name }}' as bq_table,\n  '`{{ var('schema') }}`.`{{ table_name }}`' AS fully_qualified_bq_table,\n  NULL AS creation_time\n    {% if not loop.last %}UNION ALL{% endif %}\n  {% endfor %}\n\n{% else %}\n\nSELECT\n  table_catalog as bq_project,\n  table_schema as bq_dataset,\n  table_name as bq_table,\n  CONCAT('`', table_catalog, '`.`', table_schema, '`.`', table_name, '`') AS fully_qualified_bq_table,\n  {%- if var('multiple_tables_per_resource') -%}\n  {#- Note that this block supports a specific table naming convention so may need updating to work with your data -#}\n  SPLIT(table_name, '_')[SAFE_OFFSET(0)] AS fhir_resource,\n  REGEXP_REPLACE(table_name, r'(_[0-9]{8,})+.*', '') AS map_name,\n  IF(1 = ROW_NUMBER() OVER (\n    PARTITION BY REGEXP_REPLACE(table_name, r'(_[0-9]{8,})+.*', '')\n    ORDER BY\n      IF(table_name LIKE '%golden', 1, 0) DESC,\n      creation_time DESC\n  ), 1, 0) AS latest_version,\n  {%- else %}\n  REPLACE(INITCAP(table_name), '_', '') AS fhir_resource,\n  NULL AS map_name,\n  1 AS latest_version,\n  {%- endif -%}\n  creation_time\nFROM `{{ var('database') }}`.`{{ var('schema') }}`.INFORMATION_SCHEMA.TABLES\n\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.is_spark"], "nodes": []}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/fhir_table_list.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nSELECT\n  table_catalog as bq_project,\n  table_schema as bq_dataset,\n  table_name as bq_table,\n  CONCAT('`', table_catalog, '`.`', table_schema, '`.`', table_name, '`') AS fully_qualified_bq_table,\n  REPLACE(INITCAP(table_name), '_', '') AS fhir_resource,\n  NULL AS map_name,\n  1 AS latest_version,creation_time\nFROM `bigquery-public-data`.`fhir_synthea`.INFORMATION_SCHEMA.TABLES\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.PractitionerRole": {"database": "dbt_project", "schema": "dbt_dataset", "name": "PractitionerRole", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/PractitionerRole.sql", "original_file_path": "models/fhir_resources/PractitionerRole.sql", "unique_id": "model.fhir_dbt_utils.PractitionerRole", "fqn": ["fhir_dbt_utils", "fhir_resources", "PractitionerRole"], "alias": "PractitionerRole", "checksum": {"name": "sha256", "checksum": "5266ad992ecb05652f0d53da6427f6c78c032719fba907c1cf9fe712c6989aa2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of PractitionerRole FHIR resource", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "PractitionerRole", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of PractitionerRole FHIR resource", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "PractitionerRole", "meta": {"description": "View of PractitionerRole FHIR resource", "fhir_resource": "PractitionerRole", "metric_date_columns": ["period.start"], "patient_reference_column": null}}, "created_at": 1700054013.2559214, "relation_name": "`dbt_project`.`dbt_dataset`.`PractitionerRole`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"PractitionerRole\",\n    meta = {\n      \"description\": \"View of PractitionerRole FHIR resource\",\n      \"fhir_resource\": \"PractitionerRole\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": None\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/PractitionerRole.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.EpisodeOfCare": {"database": "dbt_project", "schema": "dbt_dataset", "name": "EpisodeOfCare", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/EpisodeOfCare.sql", "original_file_path": "models/fhir_resources/EpisodeOfCare.sql", "unique_id": "model.fhir_dbt_utils.EpisodeOfCare", "fqn": ["fhir_dbt_utils", "fhir_resources", "EpisodeOfCare"], "alias": "EpisodeOfCare", "checksum": {"name": "sha256", "checksum": "8fdeaa3cbfb30f3c2f2d1dbfcea6100392c8e95bd340ad2537d6c7750610b1fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Union of all EpisodeOfCare FHIR resources", "fhir_resource": "EpisodeOfCare", "metric_date_columns": ["period.start"], "patient_reference_column": "patient"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "EpisodeOfCare", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Union of all EpisodeOfCare FHIR resources", "fhir_resource": "EpisodeOfCare", "metric_date_columns": ["period.start"], "patient_reference_column": "patient"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "EpisodeOfCare", "meta": {"description": "Union of all EpisodeOfCare FHIR resources", "fhir_resource": "EpisodeOfCare", "metric_date_columns": ["period.start"], "patient_reference_column": "patient"}}, "created_at": 1700054013.2677267, "relation_name": "`dbt_project`.`dbt_dataset`.`EpisodeOfCare`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"EpisodeOfCare\",\n    meta = {\n      \"description\": \"Union of all EpisodeOfCare FHIR resources\",\n      \"fhir_resource\": \"EpisodeOfCare\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": \"patient\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/EpisodeOfCare.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS patient,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Condition": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Condition", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Condition.sql", "original_file_path": "models/fhir_resources/Condition.sql", "unique_id": "model.fhir_dbt_utils.Condition", "fqn": ["fhir_dbt_utils", "fhir_resources", "Condition"], "alias": "Condition", "checksum": {"name": "sha256", "checksum": "736d545519cf8888c5023c8926e9997c11b8c9deffac23aedfc3f114c22b39ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Condition FHIR resource", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Condition", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Condition FHIR resource", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Condition", "meta": {"description": "View of Condition FHIR resource", "fhir_resource": "Condition", "metric_date_columns": ["recordedDate"], "patient_reference_column": "subject"}}, "created_at": 1700054013.2812521, "relation_name": "`dbt_project`.`dbt_dataset`.`Condition`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Condition\",\n    meta = {\n      \"description\": \"View of Condition FHIR resource\",\n      \"fhir_resource\": \"Condition\",\n      \"metric_date_columns\": [\"recordedDate\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Condition.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      \n    safe_cast(assertedDate as date)\n,\n      DATE(\n    safe_cast(assertedDate as TIMESTAMP)\n, 'America/New_York')\n    ) AS metric_date,\n    IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(assertedDate as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`condition`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.MedicationAdministration": {"database": "dbt_project", "schema": "dbt_dataset", "name": "MedicationAdministration", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/MedicationAdministration.sql", "original_file_path": "models/fhir_resources/MedicationAdministration.sql", "unique_id": "model.fhir_dbt_utils.MedicationAdministration", "fqn": ["fhir_dbt_utils", "fhir_resources", "MedicationAdministration"], "alias": "MedicationAdministration", "checksum": {"name": "sha256", "checksum": "50057c7ad124665fc5dfec23c3c5da1bfbbd590a5e631ae90e70e0da77883fed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of MedicationAdministration FHIR resource", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationAdministration", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of MedicationAdministration FHIR resource", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "MedicationAdministration", "meta": {"description": "View of MedicationAdministration FHIR resource", "fhir_resource": "MedicationAdministration", "metric_date_columns": ["effective.period.start", "effective.dateTime"], "patient_reference_column": "subject"}}, "created_at": 1700054013.2915041, "relation_name": "`dbt_project`.`dbt_dataset`.`MedicationAdministration`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"MedicationAdministration\",\n    meta = {\n      \"description\": \"View of MedicationAdministration FHIR resource\",\n      \"fhir_resource\": \"MedicationAdministration\",\n      \"metric_date_columns\": [\"effective.period.start\", \"effective.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/MedicationAdministration.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Binary": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Binary", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Binary.sql", "original_file_path": "models/fhir_resources/Binary.sql", "unique_id": "model.fhir_dbt_utils.Binary", "fqn": ["fhir_dbt_utils", "fhir_resources", "Binary"], "alias": "Binary", "checksum": {"name": "sha256", "checksum": "f401dbccee83d56b4bae4113bb37b4880bb16b852dd87cda7926f33c36d47d9a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Binary FHIR resource", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Binary", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Binary FHIR resource", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Binary", "meta": {"description": "View of Binary FHIR resource", "fhir_resource": "Binary", "metric_date_columns": null, "patient_reference_column": null}}, "created_at": 1700054013.3036327, "relation_name": "`dbt_project`.`dbt_dataset`.`Binary`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Binary\",\n    meta = {\n      \"description\": \"View of Binary FHIR resource\",\n      \"fhir_resource\": \"Binary\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Binary.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.AllergyIntolerance": {"database": "dbt_project", "schema": "dbt_dataset", "name": "AllergyIntolerance", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/AllergyIntolerance.sql", "original_file_path": "models/fhir_resources/AllergyIntolerance.sql", "unique_id": "model.fhir_dbt_utils.AllergyIntolerance", "fqn": ["fhir_dbt_utils", "fhir_resources", "AllergyIntolerance"], "alias": "AllergyIntolerance", "checksum": {"name": "sha256", "checksum": "c41f365351a314f607eef0e916bfb889550433839ccb986519a9da4132647477"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of AllergyIntolerance FHIR resource", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "AllergyIntolerance", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of AllergyIntolerance FHIR resource", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "AllergyIntolerance", "meta": {"description": "View of AllergyIntolerance FHIR resource", "fhir_resource": "AllergyIntolerance", "metric_date_columns": ["recordedDate"], "patient_reference_column": "patient"}}, "created_at": 1700054013.3205233, "relation_name": "`dbt_project`.`dbt_dataset`.`AllergyIntolerance`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"AllergyIntolerance\",\n    meta = {\n      \"description\": \"View of AllergyIntolerance FHIR resource\",\n      \"fhir_resource\": \"AllergyIntolerance\",\n      \"metric_date_columns\": [\"recordedDate\"],\n      \"patient_reference_column\": \"patient\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/AllergyIntolerance.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      \n    safe_cast(assertedDate as date)\n,\n      DATE(\n    safe_cast(assertedDate as TIMESTAMP)\n, 'America/New_York')\n    ) AS metric_date,\n    IF(\n      CHAR_LENGTH(assertedDate) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(assertedDate as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`allergy_intolerance`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Person": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Person", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Person.sql", "original_file_path": "models/fhir_resources/Person.sql", "unique_id": "model.fhir_dbt_utils.Person", "fqn": ["fhir_dbt_utils", "fhir_resources", "Person"], "alias": "Person", "checksum": {"name": "sha256", "checksum": "b54ca65581142af9d64f0cafc459ce3ce99c2e3f5d82c2dbe140f961fddb505c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Person FHIR resource", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Person", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Person FHIR resource", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Person", "meta": {"description": "View of Person FHIR resource", "fhir_resource": "Person", "metric_date_columns": null, "patient_reference_column": "link[].target"}}, "created_at": 1700054013.3347678, "relation_name": "`dbt_project`.`dbt_dataset`.`Person`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Person\",\n    meta = {\n      \"description\": \"View of Person FHIR resource\",\n      \"fhir_resource\": \"Person\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": \"link[].target\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Person.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  \n    [ STRUCT(STRUCT('no_data' AS patientId) AS target) ]\n     AS link,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Encounter": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Encounter", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Encounter.sql", "original_file_path": "models/fhir_resources/Encounter.sql", "unique_id": "model.fhir_dbt_utils.Encounter", "fqn": ["fhir_dbt_utils", "fhir_resources", "Encounter"], "alias": "Encounter", "checksum": {"name": "sha256", "checksum": "75d99639ef78622566020e9173fcbe293eba270135a22de4824566789f3e9fd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Encounter FHIR resource", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Encounter", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Encounter FHIR resource", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Encounter", "meta": {"description": "View of Encounter FHIR resource", "fhir_resource": "Encounter", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}}, "created_at": 1700054013.3537493, "relation_name": "`dbt_project`.`dbt_dataset`.`Encounter`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Encounter\",\n    meta = {\n      \"description\": \"View of Encounter FHIR resource\",\n      \"fhir_resource\": \"Encounter\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Encounter.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    IF(\n      CHAR_LENGTH(period.start) = 10,\n      \n    safe_cast(period.start as date)\n,\n      DATE(\n    safe_cast(period.start as TIMESTAMP)\n, 'America/New_York')\n    ) AS metric_date,\n    IF(\n      CHAR_LENGTH(period.start) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(period.start as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`encounter`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Medication": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Medication", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Medication.sql", "original_file_path": "models/fhir_resources/Medication.sql", "unique_id": "model.fhir_dbt_utils.Medication", "fqn": ["fhir_dbt_utils", "fhir_resources", "Medication"], "alias": "Medication", "checksum": {"name": "sha256", "checksum": "40fb780b593ac7174ac335bddc598b2420364d08e7405462fb3be3397e163186"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Medication FHIR resource", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Medication", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Medication FHIR resource", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Medication", "meta": {"description": "View of Medication FHIR resource", "fhir_resource": "Medication", "metric_date_columns": null, "patient_reference_column": null}}, "created_at": 1700054013.3651361, "relation_name": "`dbt_project`.`dbt_dataset`.`Medication`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Medication\",\n    meta = {\n      \"description\": \"View of Medication FHIR resource\",\n      \"fhir_resource\": \"Medication\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Medication.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Observation": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Observation", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Observation.sql", "original_file_path": "models/fhir_resources/Observation.sql", "unique_id": "model.fhir_dbt_utils.Observation", "fqn": ["fhir_dbt_utils", "fhir_resources", "Observation"], "alias": "Observation", "checksum": {"name": "sha256", "checksum": "7470104062ed38a8674a7b3389503fc0b254a28d56a4351bdef510c5907235ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Observation FHIR resource", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Observation", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Observation FHIR resource", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Observation", "meta": {"description": "View of Observation FHIR resource", "fhir_resource": "Observation", "metric_date_columns": ["effective.dateTime"], "patient_reference_column": "subject"}}, "created_at": 1700054013.3784347, "relation_name": "`dbt_project`.`dbt_dataset`.`Observation`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Observation\",\n    meta = {\n      \"description\": \"View of Observation FHIR resource\",\n      \"fhir_resource\": \"Observation\",\n      \"metric_date_columns\": [\"effective.dateTime\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Observation.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    IF(\n      CHAR_LENGTH(effective.dateTime) = 10,\n      \n    safe_cast(effective.dateTime as date)\n,\n      DATE(\n    safe_cast(effective.dateTime as TIMESTAMP)\n, 'America/New_York')\n    ) AS metric_date,\n    IF(\n      CHAR_LENGTH(effective.dateTime) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(effective.dateTime as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`observation`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Location": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Location", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Location.sql", "original_file_path": "models/fhir_resources/Location.sql", "unique_id": "model.fhir_dbt_utils.Location", "fqn": ["fhir_dbt_utils", "fhir_resources", "Location"], "alias": "Location", "checksum": {"name": "sha256", "checksum": "6bc3a0f608605cdb9fc358794ca3b425c8a3293bca2428b21bb9e9df399859e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Location FHIR resource", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Location", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Location FHIR resource", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Location", "meta": {"description": "View of Location FHIR resource", "fhir_resource": "Location", "metric_date_columns": null, "patient_reference_column": null}}, "created_at": 1700054013.3881397, "relation_name": "`dbt_project`.`dbt_dataset`.`Location`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Location\",\n    meta = {\n      \"description\": \"View of Location FHIR resource\",\n      \"fhir_resource\": \"Location\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Location.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.MedicationRequest": {"database": "dbt_project", "schema": "dbt_dataset", "name": "MedicationRequest", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/MedicationRequest.sql", "original_file_path": "models/fhir_resources/MedicationRequest.sql", "unique_id": "model.fhir_dbt_utils.MedicationRequest", "fqn": ["fhir_dbt_utils", "fhir_resources", "MedicationRequest"], "alias": "MedicationRequest", "checksum": {"name": "sha256", "checksum": "9451f16bf69480eb041366e6b675b868f5fe56c1283f26ebfe81ebe2f2827043"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of MedicationRequest FHIR resource", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "MedicationRequest", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of MedicationRequest FHIR resource", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "MedicationRequest", "meta": {"description": "View of MedicationRequest FHIR resource", "fhir_resource": "MedicationRequest", "metric_date_columns": ["authoredOn"], "patient_reference_column": "subject"}}, "created_at": 1700054013.3996296, "relation_name": "`dbt_project`.`dbt_dataset`.`MedicationRequest`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"MedicationRequest\",\n    meta = {\n      \"description\": \"View of MedicationRequest FHIR resource\",\n      \"fhir_resource\": \"MedicationRequest\",\n      \"metric_date_columns\": [\"authoredOn\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/MedicationRequest.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    IF(\n      CHAR_LENGTH(authoredOn) = 10,\n      \n    safe_cast(authoredOn as date)\n,\n      DATE(\n    safe_cast(authoredOn as TIMESTAMP)\n, 'America/New_York')\n    ) AS metric_date,\n    IF(\n      CHAR_LENGTH(authoredOn) = 10,\n      \n    safe_cast(NULL as TIMESTAMP)\n,\n      TIMESTAMP_TRUNC(\n    safe_cast(authoredOn as TIMESTAMP)\n, hour, 'America/New_York')\n    ) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`medication_request`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.CareTeam": {"database": "dbt_project", "schema": "dbt_dataset", "name": "CareTeam", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/CareTeam.sql", "original_file_path": "models/fhir_resources/CareTeam.sql", "unique_id": "model.fhir_dbt_utils.CareTeam", "fqn": ["fhir_dbt_utils", "fhir_resources", "CareTeam"], "alias": "CareTeam", "checksum": {"name": "sha256", "checksum": "f459190f90dd95c65cb7d8a7a030b6a8ff3ace2726063f9d24069a118058b70a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of CareTeam FHIR resource", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "CareTeam", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of CareTeam FHIR resource", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "CareTeam", "meta": {"description": "View of CareTeam FHIR resource", "fhir_resource": "CareTeam", "metric_date_columns": ["period.start"], "patient_reference_column": "subject"}}, "created_at": 1700054013.4123855, "relation_name": "`dbt_project`.`dbt_dataset`.`CareTeam`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"CareTeam\",\n    meta = {\n      \"description\": \"View of CareTeam FHIR resource\",\n      \"fhir_resource\": \"CareTeam\",\n      \"metric_date_columns\": [\"period.start\"],\n      \"patient_reference_column\": \"subject\"\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/CareTeam.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    SELECT\n  CAST(NULL AS STRING) AS id,\n  STRUCT('no_data' AS patientId) AS subject,\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fhir_dbt_utils.Organization": {"database": "dbt_project", "schema": "dbt_dataset", "name": "Organization", "resource_type": "model", "package_name": "fhir_dbt_utils", "path": "fhir_resources/Organization.sql", "original_file_path": "models/fhir_resources/Organization.sql", "unique_id": "model.fhir_dbt_utils.Organization", "fqn": ["fhir_dbt_utils", "fhir_resources", "Organization"], "alias": "Organization", "checksum": {"name": "sha256", "checksum": "994bf5625eec1fde1365020df5c4da381ca94129a04b7aa48b4c223749caf5e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "View of Organization FHIR resource", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "Organization", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "View of Organization FHIR resource", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{%- if target.name == \"internal_pipeline\" -%} ephemeral\n{%- else -%} view\n{%- endif -%}", "name": "Organization", "meta": {"description": "View of Organization FHIR resource", "fhir_resource": "Organization", "metric_date_columns": null, "patient_reference_column": null}}, "created_at": 1700054013.4270732, "relation_name": "`dbt_project`.`dbt_dataset`.`Organization`", "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: {{ ref('fhir_table_list') }}\n\n{{- config(\n    name = \"Organization\",\n    meta = {\n      \"description\": \"View of Organization FHIR resource\",\n      \"fhir_resource\": \"Organization\",\n      \"metric_date_columns\": None,\n      \"patient_reference_column\": None\n      }\n) -}}\n\n{{ fhir_resource_view_expression() -}}", "language": "sql", "refs": [{"name": "fhir_table_list", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.fhir_resource_view_expression"], "nodes": ["model.fhir_dbt_utils.fhir_table_list"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/models/fhir_resources/Organization.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n-- depends_on: `dbt_project`.`dbt_dataset`.`fhir_table_list`\n        \n    \nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    \n    CAST(NULL AS DATE) AS metric_date,\n    \n    CAST(NULL AS TIMESTAMP) AS metric_hour\nFROM `bigquery-public-data`.`fhir_synthea`.`organization`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "analysis.fhir_dbt_utils.observation_processed": {"database": "dbt_project", "schema": "dbt_dataset", "name": "observation_processed", "resource_type": "analysis", "package_name": "fhir_dbt_utils", "path": "analysis/example_queries/observation_processed.sql", "original_file_path": "analyses/example_queries/observation_processed.sql", "unique_id": "analysis.fhir_dbt_utils.observation_processed", "fqn": ["fhir_dbt_utils", "analysis", "example_queries", "observation_processed"], "alias": "observation_processed", "checksum": {"name": "sha256", "checksum": "263119560f7008dc9fce0181b5758b6cb6973c4910314060b822619d3a8763ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Example query over Observation FHIR resource", "fhir_resource": "Observation"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "observation_processed", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Example query over Observation FHIR resource", "fhir_resource": "Observation"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "observation_processed", "meta": {"description": "Example query over Observation FHIR resource", "fhir_resource": "Observation"}, "materialized": "view"}, "created_at": 1700054013.48785, "relation_name": null, "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n{{- config(\n    name = \"observation_processed\",\n    meta = {\n      \"description\": \"Example query over Observation FHIR resource\",\n      \"fhir_resource\": \"Observation\"\n      },\n    materialized = 'view'\n) }}\n\nSELECT\n  id AS id,\n  {{ code_from_codeableconcept('code', 'http://loinc.org') }} AS loinc_code,\n  {{ code_from_codeableconcept('code', 'http://loinc.org', return_field='display') }} AS loinc_display,\n  {{ code_from_codeableconcept('category', 'http://hl7.org/fhir/observation-category') }} AS hl7_category,\n  {{ has_value('category') }} AS has_category,\n  {{ string_to_date('effective.dateTime') }} AS effective_datetime,\n  {{ value_from_component('8480-6', 'http://loinc.org') }} AS systolic_bp,\n  {{ value_from_component('8462-4', 'http://loinc.org') }} AS diastolic_bp\n\nFROM {{ ref('Observation') }}\nLIMIT 100", "language": "sql", "refs": [{"name": "Observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.code_from_codeableconcept", "macro.fhir_dbt_utils.has_value", "macro.fhir_dbt_utils.string_to_date", "macro.fhir_dbt_utils.value_from_component"], "nodes": ["model.fhir_dbt_utils.Observation"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/analyses/example_queries/observation_processed.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nSELECT\n  id AS id,\n  (SELECT c.code FROM UNNEST(code.coding) c WHERE c.system = 'http://loinc.org' ORDER BY c.code LIMIT 1) AS loinc_code,\n  (SELECT c.display FROM UNNEST(code.coding) c WHERE c.system = 'http://loinc.org' ORDER BY c.code LIMIT 1) AS loinc_display,\n  (SELECT c.code FROM UNNEST(category) f, UNNEST(f.coding) c WHERE c.system = 'http://hl7.org/fhir/observation-category' ORDER BY c.code LIMIT 1) AS hl7_category,\n  category IS NOT NULL AS has_category,\n  IF(\n    CHAR_LENGTH(effective.dateTime) = 10,\n    \n    safe_cast(effective.dateTime as date)\n,\n    DATE(\n            safe_cast(effective.dateTime as TIMESTAMP)\n        , 'America/New_York')\n  ) AS effective_datetime,\n  (SELECT c.value.quantity.value FROM UNNEST(component) c, UNNEST(c.code.coding) cc WHERE cc.system = 'http://loinc.org' AND cc.code = '8480-6' ORDER BY cc.code LIMIT 1) AS systolic_bp,\n  (SELECT c.value.quantity.value FROM UNNEST(component) c, UNNEST(c.code.coding) cc WHERE cc.system = 'http://loinc.org' AND cc.code = '8462-4' ORDER BY cc.code LIMIT 1) AS diastolic_bp\n\nFROM `dbt_project`.`dbt_dataset`.`Observation`\nLIMIT 100", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.fhir_dbt_utils.patient_processed": {"database": "dbt_project", "schema": "dbt_dataset", "name": "patient_processed", "resource_type": "analysis", "package_name": "fhir_dbt_utils", "path": "analysis/example_queries/patient_processed.sql", "original_file_path": "analyses/example_queries/patient_processed.sql", "unique_id": "analysis.fhir_dbt_utils.patient_processed", "fqn": ["fhir_dbt_utils", "analysis", "example_queries", "patient_processed"], "alias": "patient_processed", "checksum": {"name": "sha256", "checksum": "6c0198f0f3e2a8693c419f67afbd55aa34b36fb558f257a40fb1105d9e30e899"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Example query over Patient FHIR resource", "fhir_resource": "Patient"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "patient_processed", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Example query over Patient FHIR resource", "fhir_resource": "Patient"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "patient_processed", "meta": {"description": "Example query over Patient FHIR resource", "fhir_resource": "Patient"}, "materialized": "view"}, "created_at": 1700054013.6228042, "relation_name": null, "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n{{- config(\n    name = \"patient_processed\",\n    meta = {\n      \"description\": \"Example query over Patient FHIR resource\",\n      \"fhir_resource\": \"Patient\"\n      },\n    materialized = 'view'\n) }}\n\nSELECT\n  id AS id,\n  {{ identifier('http://hl7.org/fhir/sid/us-ssn') }} AS ssn,\n  {{ official_name() }} AS official_name,\n  {{ full_address() }} AS full_address,\n  {{ has_value('birthDate') }} AS has_value_birthdate,\n  {{ age() }} AS age,\n  {{ bucket(age()) }} AS age_group,\n  {{ alive() }} AS is_alive\n\nFROM {{ ref('Patient') }}\nLIMIT 100", "language": "sql", "refs": [{"name": "Patient", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.identifier", "macro.fhir_dbt_utils.official_name", "macro.fhir_dbt_utils.full_address", "macro.fhir_dbt_utils.has_value", "macro.fhir_dbt_utils.age", "macro.fhir_dbt_utils.bucket", "macro.fhir_dbt_utils.alive"], "nodes": ["model.fhir_dbt_utils.Patient"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/analyses/example_queries/patient_processed.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nSELECT\n  id AS id,\n  (SELECT value FROM UNNEST(identifier) WHERE system = 'http://hl7.org/fhir/sid/us-ssn') AS ssn,\n  CONCAT(\n  (SELECT ARRAY_TO_STRING(prefix, ' ') FROM UNNEST(name) WHERE use = 'official'), ' ',\n  (SELECT ARRAY_TO_STRING(given, ' ') FROM UNNEST(name) WHERE use = 'official'),\n  ' ', (SELECT family FROM UNNEST(name) WHERE use = 'official')\n  ,' ', (SELECT ARRAY_TO_STRING(suffix, ' ') FROM UNNEST(name) WHERE use = 'official')\n  ) AS official_name,\n  (SELECT ARRAY_TO_STRING(ARRAY_CONCAT(line, [city, state, postalCode, country]), ', ') FROM UNNEST(address) ORDER BY use = 'home' DESC LIMIT 1) AS full_address,\n  birthDate IS NOT NULL AS has_value_birthdate,\n  DATE_DIFF(DATE('2023-01-01'), DATE(birthDate), YEAR) - IF(EXTRACT(DAYOFYEAR FROM DATE(birthDate)) > EXTRACT(DAYOFYEAR FROM DATE(DATE('2023-01-01'))), 1, 0) AS age,\n  CASE RANGE_BUCKET(DATE_DIFF(DATE('2023-01-01'), DATE(birthDate), YEAR) - IF(EXTRACT(DAYOFYEAR FROM DATE(birthDate)) > EXTRACT(DAYOFYEAR FROM DATE(DATE('2023-01-01'))), 1, 0), [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n    WHEN 0 THEN '< 0'\n  WHEN 1 THEN '0 - 10'\n  WHEN 2 THEN '10 - 20'\n  WHEN 3 THEN '20 - 30'\n  WHEN 4 THEN '30 - 40'\n  WHEN 5 THEN '40 - 50'\n  WHEN 6 THEN '50 - 60'\n  WHEN 7 THEN '60 - 70'\n  WHEN 8 THEN '70 - 80'\n  WHEN 9 THEN '80 - 90'\n  WHEN 10 THEN '90 - 100'\n  WHEN 11 THEN '>= 100'\n  ELSE NULL END AS age_group,\n  (deceased.dateTime IS NULL OR DATE(deceased.dateTime) > DATE('2023-01-01')) AS is_alive\n\nFROM `dbt_project`.`dbt_dataset`.`Patient`\nLIMIT 100", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}, "analysis.fhir_dbt_utils.encounter_processed": {"database": "dbt_project", "schema": "dbt_dataset", "name": "encounter_processed", "resource_type": "analysis", "package_name": "fhir_dbt_utils", "path": "analysis/example_queries/encounter_processed.sql", "original_file_path": "analyses/example_queries/encounter_processed.sql", "unique_id": "analysis.fhir_dbt_utils.encounter_processed", "fqn": ["fhir_dbt_utils", "analysis", "example_queries", "encounter_processed"], "alias": "encounter_processed", "checksum": {"name": "sha256", "checksum": "bd8adb175652b8dd8f40899f68cd7c22673ce35b86548a879d600401865da53b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"description": "Example query over Encounter FHIR resource", "fhir_resource": "Encounter"}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "name": "encounter_processed", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"description": "Example query over Encounter FHIR resource", "fhir_resource": "Encounter"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"name": "encounter_processed", "meta": {"description": "Example query over Encounter FHIR resource", "fhir_resource": "Encounter"}, "materialized": "view"}, "created_at": 1700054013.6714354, "relation_name": null, "raw_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\n{{- config(\n    name = \"encounter_processed\",\n    meta = {\n      \"description\": \"Example query over Encounter FHIR resource\",\n      \"fhir_resource\": \"Encounter\"\n      },\n    materialized = 'view'\n) }}\n\nSELECT\n  id AS id,\n  subject.patientId AS patient_id,\n  class.code AS class,\n  {{ code_from_codeableconcept('type', 'http://snomed.info/sct') }} AS type,\n  {{ string_to_date('period.start') }} AS period_start,\n  {{ string_to_date('period.end') }} AS period_end,\n  {{ length_of_stay() }} AS length_of_stay\n\nFROM {{ ref('Encounter') }}\nLIMIT 100", "language": "sql", "refs": [{"name": "Encounter", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fhir_dbt_utils.code_from_codeableconcept", "macro.fhir_dbt_utils.string_to_date", "macro.fhir_dbt_utils.length_of_stay"], "nodes": ["model.fhir_dbt_utils.Encounter"]}, "compiled_path": "/tmp/fhir_dbt_utils/target/compiled/fhir_dbt_utils/analyses/example_queries/encounter_processed.sql", "compiled": true, "compiled_code": "-- Copyright 2023 Google LLC\n--\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file except in compliance with the License.\n-- You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n\nSELECT\n  id AS id,\n  subject.patientId AS patient_id,\n  class.code AS class,\n  (SELECT c.code FROM UNNEST(type) f, UNNEST(f.coding) c WHERE c.system = 'http://snomed.info/sct' ORDER BY c.code LIMIT 1) AS type,\n  IF(\n    CHAR_LENGTH(period.start) = 10,\n    \n    safe_cast(period.start as date)\n,\n    DATE(\n            safe_cast(period.start as TIMESTAMP)\n        , 'America/New_York')\n  ) AS period_start,\n  IF(\n    CHAR_LENGTH(period.end) = 10,\n    \n    safe_cast(period.end as date)\n,\n    DATE(\n            safe_cast(period.end as TIMESTAMP)\n        , 'America/New_York')\n  ) AS period_end,\n  DATE_DIFF(\n      IF(\n    CHAR_LENGTH(period.end) = 10,\n    \n    safe_cast(period.end as date)\n,\n    DATE(\n            safe_cast(period.end as TIMESTAMP)\n        , 'America/New_York')\n  ),\n      IF(\n    CHAR_LENGTH(period.start) = 10,\n    \n    safe_cast(period.start as date)\n,\n    DATE(\n            safe_cast(period.start as TIMESTAMP)\n        , 'America/New_York')\n  ),\n      DAY\n    ) AS length_of_stay\n\nFROM `dbt_project`.`dbt_dataset`.`Encounter`\nLIMIT 100", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}}}, "sources": {"source.fhir_dbt_utils.fhir.AllergyIntolerance": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "AllergyIntolerance", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.AllergyIntolerance", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "AllergyIntolerance"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "AllergyIntolerance", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`AllergyIntolerance`", "created_at": 1700054013.925819}, "source.fhir_dbt_utils.fhir.Binary": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Binary", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Binary", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Binary"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Binary", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Binary`", "created_at": 1700054013.9262543}, "source.fhir_dbt_utils.fhir.CarePlan": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "CarePlan", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.CarePlan", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "CarePlan"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "CarePlan", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`CarePlan`", "created_at": 1700054013.926521}, "source.fhir_dbt_utils.fhir.CareTeam": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "CareTeam", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.CareTeam", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "CareTeam"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "CareTeam", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`CareTeam`", "created_at": 1700054013.9271815}, "source.fhir_dbt_utils.fhir.Claim": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Claim", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Claim", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Claim"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Claim", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Claim`", "created_at": 1700054013.9277194}, "source.fhir_dbt_utils.fhir.Composition": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Composition", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Composition", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Composition"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Composition", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Composition`", "created_at": 1700054013.9281323}, "source.fhir_dbt_utils.fhir.Condition": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Condition", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Condition", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Condition"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Condition", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Condition`", "created_at": 1700054013.9283602}, "source.fhir_dbt_utils.fhir.Device": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Device", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Device", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Device"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Device", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Device`", "created_at": 1700054013.928889}, "source.fhir_dbt_utils.fhir.DiagnosticReport": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "DiagnosticReport", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.DiagnosticReport", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "DiagnosticReport"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "DiagnosticReport", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`DiagnosticReport`", "created_at": 1700054013.9292905}, "source.fhir_dbt_utils.fhir.DocumentReference": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "DocumentReference", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.DocumentReference", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "DocumentReference"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "DocumentReference", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`DocumentReference`", "created_at": 1700054013.9294713}, "source.fhir_dbt_utils.fhir.Encounter": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Encounter", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Encounter", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Encounter"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Encounter", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Encounter`", "created_at": 1700054013.92965}, "source.fhir_dbt_utils.fhir.EpisodeOfCare": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "EpisodeOfCare", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.EpisodeOfCare", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "EpisodeOfCare"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "EpisodeOfCare", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`EpisodeOfCare`", "created_at": 1700054013.9298334}, "source.fhir_dbt_utils.fhir.ExplanationOfBenefit": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "ExplanationOfBenefit", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.ExplanationOfBenefit", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "ExplanationOfBenefit"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "ExplanationOfBenefit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`ExplanationOfBenefit`", "created_at": 1700054013.9305685}, "source.fhir_dbt_utils.fhir.ImagingStudy": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "ImagingStudy", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.ImagingStudy", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "ImagingStudy"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "ImagingStudy", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`ImagingStudy`", "created_at": 1700054013.9309776}, "source.fhir_dbt_utils.fhir.Immunization": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Immunization", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Immunization", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Immunization"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Immunization", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Immunization`", "created_at": 1700054013.9314811}, "source.fhir_dbt_utils.fhir.Location": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Location", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Location", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Location"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Location`", "created_at": 1700054013.9318912}, "source.fhir_dbt_utils.fhir.Medication": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Medication", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Medication", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Medication"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Medication", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Medication`", "created_at": 1700054013.932295}, "source.fhir_dbt_utils.fhir.MedicationDispense": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "MedicationDispense", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.MedicationDispense", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "MedicationDispense"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "MedicationDispense", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`MedicationDispense`", "created_at": 1700054013.9326613}, "source.fhir_dbt_utils.fhir.MedicationAdministration": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "MedicationAdministration", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.MedicationAdministration", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "MedicationAdministration"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "MedicationAdministration", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`MedicationAdministration`", "created_at": 1700054013.933012}, "source.fhir_dbt_utils.fhir.MedicationRequest": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "MedicationRequest", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.MedicationRequest", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "MedicationRequest"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "MedicationRequest", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`MedicationRequest`", "created_at": 1700054013.9333951}, "source.fhir_dbt_utils.fhir.Observation": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Observation", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Observation", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Observation"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Observation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Observation`", "created_at": 1700054013.9342482}, "source.fhir_dbt_utils.fhir.Organization": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Organization", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Organization", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Organization"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Organization", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Organization`", "created_at": 1700054013.9349477}, "source.fhir_dbt_utils.fhir.Patient": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Patient", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Patient", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Patient"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Patient", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Patient`", "created_at": 1700054013.9353828}, "source.fhir_dbt_utils.fhir.Practitioner": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Practitioner", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Practitioner", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Practitioner"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Practitioner", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Practitioner`", "created_at": 1700054013.9357705}, "source.fhir_dbt_utils.fhir.PractitionerRole": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "PractitionerRole", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.PractitionerRole", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "PractitionerRole"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "PractitionerRole", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`PractitionerRole`", "created_at": 1700054013.936138}, "source.fhir_dbt_utils.fhir.Procedure": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "Procedure", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.Procedure", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "Procedure"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "Procedure", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`Procedure`", "created_at": 1700054013.9365177}, "source.fhir_dbt_utils.fhir.allergy_intolerance": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "allergy_intolerance", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.allergy_intolerance", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "allergy_intolerance"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "allergy_intolerance", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`allergy_intolerance`", "created_at": 1700054013.936913}, "source.fhir_dbt_utils.fhir.binary": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "binary", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.binary", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "binary"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "binary", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`binary`", "created_at": 1700054013.9372885}, "source.fhir_dbt_utils.fhir.care_plan": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "care_plan", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.care_plan", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "care_plan"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "care_plan", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`care_plan`", "created_at": 1700054013.937681}, "source.fhir_dbt_utils.fhir.care_team": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "care_team", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.care_team", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "care_team"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "care_team", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`care_team`", "created_at": 1700054013.9380553}, "source.fhir_dbt_utils.fhir.claim": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "claim", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.claim", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "claim"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "claim", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`claim`", "created_at": 1700054013.938448}, "source.fhir_dbt_utils.fhir.composition": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "composition", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.composition", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "composition"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "composition", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`composition`", "created_at": 1700054013.9387789}, "source.fhir_dbt_utils.fhir.condition": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "condition", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.condition", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "condition"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "condition", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`condition`", "created_at": 1700054013.9391677}, "source.fhir_dbt_utils.fhir.device": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "device", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.device", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "device"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "device", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`device`", "created_at": 1700054013.939548}, "source.fhir_dbt_utils.fhir.diagnostic_report": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "diagnostic_report", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.diagnostic_report", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "diagnostic_report"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "diagnostic_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`diagnostic_report`", "created_at": 1700054013.9398801}, "source.fhir_dbt_utils.fhir.document_reference": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "document_reference", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.document_reference", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "document_reference"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "document_reference", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`document_reference`", "created_at": 1700054013.9402533}, "source.fhir_dbt_utils.fhir.encounter": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "encounter", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.encounter", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "encounter"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "encounter", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`encounter`", "created_at": 1700054013.9406173}, "source.fhir_dbt_utils.fhir.episode_of_care": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "episode_of_care", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.episode_of_care", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "episode_of_care"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "episode_of_care", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`episode_of_care`", "created_at": 1700054013.9409444}, "source.fhir_dbt_utils.fhir.explanation_of_benefit": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "explanation_of_benefit", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.explanation_of_benefit", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "explanation_of_benefit"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "explanation_of_benefit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`explanation_of_benefit`", "created_at": 1700054013.9412794}, "source.fhir_dbt_utils.fhir.imaging_study": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "imaging_study", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.imaging_study", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "imaging_study"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "imaging_study", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`imaging_study`", "created_at": 1700054013.9416323}, "source.fhir_dbt_utils.fhir.immunization": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "immunization", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.immunization", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "immunization"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "immunization", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`immunization`", "created_at": 1700054013.9420485}, "source.fhir_dbt_utils.fhir.location": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "location", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.location", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "location"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`location`", "created_at": 1700054013.9426796}, "source.fhir_dbt_utils.fhir.medication": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "medication", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.medication", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "medication"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication`", "created_at": 1700054013.942989}, "source.fhir_dbt_utils.fhir.medication_administration": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "medication_administration", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.medication_administration", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "medication_administration"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication_administration", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication_administration`", "created_at": 1700054013.9433594}, "source.fhir_dbt_utils.fhir.medication_dispense": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "medication_dispense", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.medication_dispense", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "medication_dispense"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication_dispense", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication_dispense`", "created_at": 1700054013.9437764}, "source.fhir_dbt_utils.fhir.medication_request": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "medication_request", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.medication_request", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "medication_request"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "medication_request", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`medication_request`", "created_at": 1700054013.9441805}, "source.fhir_dbt_utils.fhir.observation": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "observation", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.observation", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "observation"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "observation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`observation`", "created_at": 1700054013.9445777}, "source.fhir_dbt_utils.fhir.organization": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "organization", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.organization", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "organization"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "organization", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`organization`", "created_at": 1700054013.9449668}, "source.fhir_dbt_utils.fhir.patient": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "patient", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.patient", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "patient"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "patient", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`patient`", "created_at": 1700054013.9453764}, "source.fhir_dbt_utils.fhir.practitioner": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "practitioner", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.practitioner", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "practitioner"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "practitioner", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`practitioner`", "created_at": 1700054013.9457693}, "source.fhir_dbt_utils.fhir.practitioner_role": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "practitioner_role", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.practitioner_role", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "practitioner_role"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "practitioner_role", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`practitioner_role`", "created_at": 1700054013.9462385}, "source.fhir_dbt_utils.fhir.procedure": {"database": "bigquery-public-data", "schema": "fhir_synthea", "name": "procedure", "resource_type": "source", "package_name": "fhir_dbt_utils", "path": "models/fhir_resources/fhir_sources.yml", "original_file_path": "models/fhir_resources/fhir_sources.yml", "unique_id": "source.fhir_dbt_utils.fhir.procedure", "fqn": ["fhir_dbt_utils", "fhir_resources", "fhir", "procedure"], "source_name": "fhir", "source_description": "FHIR exported to BigQuery", "loader": "", "identifier": "procedure", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`bigquery-public-data`.`fhir_synthea`.`procedure`", "created_at": 1700054013.9466398}}, "macros": {"macro.dbt_dataset.run_unit_tests": {"name": "run_unit_tests", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/run_unit_tests.sql", "original_file_path": "macros/run_unit_tests.sql", "unique_id": "macro.dbt_dataset.run_unit_tests", "macro_sql": "{% macro run_unit_tests() %}\n\n    {# fhir_analysis_macros #}\n    {% do test_age() %}\n    {% do test_bucket() %}\n    {% do test_length_of_stay() %}\n    {% do test_official_name() %}\n    {% do test_identifier() %}\n    {% do test_full_address() %}\n    {% do test_alive() %}\n    {% do test_code_from_codeableconcept() %}\n    {% do test_value_from_component() %}\n    {% do test_has_value() %}\n    {% do test_string_to_date() %}\n\n\n    {# string_macros #}\n    {% do test_quote_array() %}\n    {% do test_find_first_of() %}\n    {% do test_camel_case_to_snake_case() %}\n    {% do test_snake_case_to_proper_case() %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_dataset.test_age", "macro.dbt_dataset.test_bucket", "macro.dbt_dataset.test_length_of_stay", "macro.dbt_dataset.test_official_name", "macro.dbt_dataset.test_identifier", "macro.dbt_dataset.test_full_address", "macro.dbt_dataset.test_alive", "macro.dbt_dataset.test_code_from_codeableconcept", "macro.dbt_dataset.test_value_from_component", "macro.dbt_dataset.test_has_value", "macro.dbt_dataset.test_string_to_date", "macro.dbt_dataset.test_quote_array", "macro.dbt_dataset.test_find_first_of", "macro.dbt_dataset.test_camel_case_to_snake_case", "macro.dbt_dataset.test_snake_case_to_proper_case"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.981643, "supported_languages": null}, "macro.dbt_dataset.perform_tests": {"name": "perform_tests", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/perform_tests.sql", "original_file_path": "macros/perform_tests.sql", "unique_id": "macro.dbt_dataset.perform_tests", "macro_sql": "{% macro perform_tests(input_data, tests) %}\n\n  {# Write a SQL query to run each test over the input data #}\n  {% set query %}\n    SELECT\n      {% for test_name, test_object in tests.items() -%}\n        {{test_object.test | trim}} AS {{test_name}},\n      {% endfor %}\n    FROM ( SELECT {{ input_data }} )\n  {% endset %}\n\n  {# Execute the SQL query and save the results in a dictionary  #}\n  {% set query_result = dbt_utils.get_query_results_as_dict(query) %}\n\n  {# For each result compare with the expected value defined in the test #}\n  {% for test_name in tests -%}\n    {% set value = query_result[test_name][0]%}\n    {% set expected = tests[test_name].expect %}\n    {% if value|string == expected|string %}\n      {% do log(\"SUCCESSFUL UNIT TEST:\" ~ test_name ~ \".\") %}\n    {% else %}\n      {% do exceptions.raise_compiler_error(\n        \"FAILED UNIT TEST: \" ~ test_name ~ \". Expected: \" ~ expected ~ \". Returned: \" ~ value ~ \".\"\n      ) %}\n    {% endif %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.9842885, "supported_languages": null}, "macro.dbt_dataset.test_code_from_codeableconcept": {"name": "test_code_from_codeableconcept", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_code_from_codeableconcept.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_code_from_codeableconcept.sql", "unique_id": "macro.dbt_dataset.test_code_from_codeableconcept", "macro_sql": "{% macro test_code_from_codeableconcept() %}\n\n  {% set input_data %}\n    STRUCT(\n      [ STRUCT(\n        \"55284-4\" AS `code`,\n        \"Blood Pressure\" AS `display`,\n        \"http://loinc.org\" AS `system`\n      )] AS `coding`,\n      \"Blood Pressure\" AS `text`\n    ) AS `code`\n  {% endset %}\n\n  {% set tests = {\n    'return_code': {\n      'test': fhir_dbt_utils.code_from_codeableconcept(\n        field_name='code',\n        code_system='http://loinc.org',\n        fhir_resource='Observation',\n        is_array=False\n      ),\n      'expect': '55284-4'\n    },\n    'return_display': {\n      'test': fhir_dbt_utils.code_from_codeableconcept(\n        field_name='code',\n        code_system='http://loinc.org',\n        fhir_resource='Observation',\n        return_field='display',\n        is_array=False\n      ),\n      'expect': 'Blood Pressure'\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.code_from_codeableconcept", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.9860344, "supported_languages": null}, "macro.dbt_dataset.test_official_name": {"name": "test_official_name", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_official_name.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_official_name.sql", "unique_id": "macro.dbt_dataset.test_official_name", "macro_sql": "{% macro test_official_name() %}\n\n  {% set input_data %}\n    [ STRUCT(\n      \"Smith\" AS `family`,\n      [\"John\", \"Mark\"] AS `given`,\n      [\"Mr\"] AS `prefix`,\n      [\"III\"] AS `suffix`,\n      \"official\" AS `use`\n    )] as `name`\n  {% endset %}\n\n  {% set tests = {\n    'default_args': {\n      'test': fhir_dbt_utils.official_name(),\n      'expect': 'Mr John Mark Smith III'\n    },\n    'include_prefix_false': {\n      'test': fhir_dbt_utils.official_name(include_prefix=False),\n      'expect': 'John Mark Smith III'\n    },\n    'include_middle_names_false': {\n      'test': fhir_dbt_utils.official_name(include_middle_names=False),\n      'expect': 'Mr John Smith III'\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.official_name", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.988826, "supported_languages": null}, "macro.dbt_dataset.test_age": {"name": "test_age", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_age.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_age.sql", "unique_id": "macro.dbt_dataset.test_age", "macro_sql": "{% macro test_age() %}\n\n  {# Scenario 1 - default date_of_birth_field #}\n\n  {% set input_data %}\n    \"1950-01-01\" AS `birthDate`\n  {% endset %}\n\n  {% set tests = {\n    'default_date_of_birth_field': {\n      'test': fhir_dbt_utils.age(snapshot_date=\"2023-01-01\"),\n      'expect': 73\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n\n  {# Scenario 2 - date_of_birth_field specified #}\n\n  {% set input_data %}\n    \"1970-01-01\" AS `dob`\n  {% endset %}\n\n  {% set tests = {\n    'set_date_of_birth_field': {\n      'test': fhir_dbt_utils.age(\n        date_of_birth_field=\"dob\",\n        snapshot_date=\"2023-01-01\"\n      ),\n      'expect': 53\n    }\n  } %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.age", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.9909189, "supported_languages": null}, "macro.dbt_dataset.test_length_of_stay": {"name": "test_length_of_stay", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_length_of_stay.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_length_of_stay.sql", "unique_id": "macro.dbt_dataset.test_length_of_stay", "macro_sql": "{% macro test_length_of_stay() %}\n\n  {# Scenario 1 - period.end has a value #}\n\n  {% set input_data %}\n    STRUCT(\n      \"2017-04-04T17:00:00+00:00\" AS `end`,\n      \"2017-04-01T12:00:00+00:00\" AS `start`\n    ) AS `period`\n  {% endset %}\n\n  {% set tests = {\n    'default_args': {\n      'test': fhir_dbt_utils.length_of_stay(),\n      'expect': 3,\n    },\n    'date_part_week': {\n      'test': fhir_dbt_utils.length_of_stay(date_part='WEEK'),\n      'expect': 1,\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n\n  {# Scenario 2 - period.end is null (i.e. encounter is ongoing) #}\n\n  {% set input_data %}\n    STRUCT(\n      CAST(NULL AS STRING) AS `end`,\n      \"2017-04-01T12:00:00+00:00\" AS `start`\n    ) AS `period`\n  {% endset %}\n\n  {% set tests = {\n    'null_period_end_default_args': {\n      'test': fhir_dbt_utils.length_of_stay(),\n      'expect': None,\n    },\n    'null_period_end_los_for_ongoing_encounters_true': {\n      'test': fhir_dbt_utils.length_of_stay(los_for_ongoing_encounters=True),\n      'expect': 2101,\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.length_of_stay", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.9933958, "supported_languages": null}, "macro.dbt_dataset.test_value_from_component": {"name": "test_value_from_component", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_value_from_component.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_value_from_component.sql", "unique_id": "macro.dbt_dataset.test_value_from_component", "macro_sql": "{% macro test_value_from_component() %}\n\n  {# Scenario 1 - component.value.quantity.value recorded #}\n\n  {% set input_data %}\n    [ STRUCT(\n        STRUCT(\n          [ STRUCT(\n              \"8480-6\" AS `code`,\n              \"Systolic Blood Pressure\" AS `display`,\n              \"http://loinc.org\" AS `system`\n            )\n          ] AS `coding`,\n          \"Systolic Blood Pressure\"  AS `text`\n        ) as `code`,\n        STRUCT(\n          STRUCT(\n            120 AS `value`\n          ) as `quantity`\n        ) as `value`\n      ),\n      STRUCT(\n        STRUCT(\n          [ STRUCT(\n              \"8462-4\" AS `code`,\n              \"Diastolic Blood Pressure\" AS `display`,\n              \"http://loinc.org\" AS `system`\n            )\n          ] AS `coding`,\n          \"Diastolic Blood Pressure\"  AS `text`\n        ) as `code`,\n        STRUCT(\n          STRUCT(\n            80 AS `value`\n          ) as `quantity`\n        ) as `value`\n      )\n    ] as `component`\n\n  {% endset %}\n\n  {% set tests = {\n    'return_quantity_value_systolic': {\n      'test': fhir_dbt_utils.value_from_component(\n        code='8480-6',\n        code_system='http://loinc.org',\n        return_field='quantity.value'\n      ),\n      'expect': 120\n    },\n    'return_quantity_value_diastolic': {\n      'test': fhir_dbt_utils.value_from_component(\n        code='8462-4',\n        code_system='http://loinc.org',\n        return_field='quantity.value'\n      ),\n      'expect': 80\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n  {# Scenario 2 - component.value.string recorded #}\n\n  {% set input_data %}\n    [ STRUCT(\n        STRUCT(\n          [ STRUCT(\n              \"55284-4\" AS `code`,\n              \"Blood Pressure\" AS `display`,\n              \"http://loinc.org\" AS `system`\n            )\n          ] AS `coding`,\n          \"Blood Pressure\"  AS `text`\n        ) as `code`,\n        STRUCT(\n          \"120/80 mmHg\" AS `string`\n        ) as `value`\n      )\n    ] as `component`\n\n  {% endset %}\n\n  {% set tests = {\n    'return_string_blood_pressure': {\n      'test': fhir_dbt_utils.value_from_component(\n        code='55284-4',\n        code_system='http://loinc.org',\n        return_field='string'\n      ),\n      'expect': \"120/80 mmHg\"\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.value_from_component", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.9959874, "supported_languages": null}, "macro.dbt_dataset.test_string_to_date": {"name": "test_string_to_date", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_string_to_date.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_string_to_date.sql", "unique_id": "macro.dbt_dataset.test_string_to_date", "macro_sql": "{% macro test_string_to_date() %}\n\n  {% set input_data %}\n    \"1950-01-01\" AS `date_as_string`,\n    \"2022-08-01T06:15:00+00:00\" AS `date_time_as_string`\n  {% endset %}\n\n  {% set tests = {\n    'date_as_string': {\n      'test': fhir_dbt_utils.string_to_date(date_field=\"date_as_string\", timezone=\"America/New_York\"),\n      'expect': \"1950-01-01\"\n    },\n    'date_time_as_string': {\n      'test': fhir_dbt_utils.string_to_date(date_field=\"date_time_as_string\", timezone=\"America/New_York\"),\n      'expect': \"2022-08-01\"\n    },\n    'date_time_as_string_timezone_shift': {\n      'test': fhir_dbt_utils.string_to_date(date_field=\"date_time_as_string\", timezone=\"America/Los_Angeles\"),\n      'expect': \"2022-07-31\"\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.string_to_date", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.998011, "supported_languages": null}, "macro.dbt_dataset.test_identifier": {"name": "test_identifier", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_identifier.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_identifier.sql", "unique_id": "macro.dbt_dataset.test_identifier", "macro_sql": "{% macro test_identifier() %}\n\n  {% set input_data %}\n    [ STRUCT(\n        \"http://hl7.org/fhir/sid/us-ssn\" AS `system`,\n        \"88888888\" AS `value`\n      ),\n      STRUCT(\n        \"http://other-identifier.org\" AS `system`,\n        \"55555555\" AS `value`\n      )\n    ] as `identifier`\n  {% endset %}\n\n  {% set tests = {\n    'return_social_security_number': {\n      'test': fhir_dbt_utils.identifier(\"http://hl7.org/fhir/sid/us-ssn\"),\n      'expect': '88888888'\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.identifier", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054010.9991913, "supported_languages": null}, "macro.dbt_dataset.test_has_value": {"name": "test_has_value", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_has_value.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_has_value.sql", "unique_id": "macro.dbt_dataset.test_has_value", "macro_sql": "{% macro test_has_value() %}\n\n  {% set input_data %}\n    CAST(NULL AS STRING) AS `null_field`,\n    \"\" AS `empty_string`\n  {% endset %}\n\n  {% set tests = {\n    'null_field': {\n      'test': fhir_dbt_utils.has_value(field_name=\"null_field\", null_values=[]),\n      'expect': False\n    },\n    'empty_string_default_null_values': {\n      'test': fhir_dbt_utils.has_value(field_name=\"empty_string\", null_values=[]),\n      'expect': True\n    },\n    'empty_string_null_values_set': {\n      'test': fhir_dbt_utils.has_value(field_name=\"empty_string\",null_values=[\"\"]),\n      'expect': False\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.has_value", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0011976, "supported_languages": null}, "macro.dbt_dataset.test_alive": {"name": "test_alive", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_alive.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_alive.sql", "unique_id": "macro.dbt_dataset.test_alive", "macro_sql": "{% macro test_alive() %}\n\n  {# Scenario 1 - deceasedDateTime has a value #}\n\n  {% set input_data %}\n    STRUCT(\n      \"2022-09-01T22:35:00+00:00\" AS `dateTime`\n    ) as `deceased`\n  {% endset %}\n\n  {% set tests = {\n    'default_args': {\n      'test': fhir_dbt_utils.alive(),\n      'expect': False\n    },\n    'include_snapshot_date': {\n      'test': fhir_dbt_utils.alive(snapshot_date=\"2021-01-01\"),\n      'expect': True\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n\n  {# Scenario 2 - deceasedDateTime is null #}\n\n  {% set input_data %}\n    STRUCT(\n      FALSE AS `boolean`,\n      CAST(NULL AS STRING) AS `dateTime`\n    ) as `deceased`\n  {% endset %}\n\n  {% set tests = {\n    'default_args_datetime_null': {\n      'test': fhir_dbt_utils.alive(),\n      'expect': True\n    },\n      'include_snapshot_date_datetime_null': {\n      'test': fhir_dbt_utils.alive(snapshot_date=\"2021-01-01\"),\n      'expect': True\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.alive", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0040727, "supported_languages": null}, "macro.dbt_dataset.test_bucket": {"name": "test_bucket", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_bucket.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_bucket.sql", "unique_id": "macro.dbt_dataset.test_bucket", "macro_sql": "{% macro test_bucket() %}\n\n  {% set input_data %}\n    68 AS `age`\n  {% endset %}\n\n  {% set tests = {\n    'deafult_boundaries_array': {\n      'test': fhir_dbt_utils.bucket(field=\"age\"),\n      'expect': '60 - 70'\n    },\n    'set_boundaries_array': {\n      'test': fhir_dbt_utils.bucket(\n        field=\"age\",\n        boundaries_array=[00, 18, 65]\n      ),\n      'expect': '>= 65'\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.bucket", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0063937, "supported_languages": null}, "macro.dbt_dataset.test_full_address": {"name": "test_full_address", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_fhir_analysis_macros/test_full_address.sql", "original_file_path": "macros/test_fhir_analysis_macros/test_full_address.sql", "unique_id": "macro.dbt_dataset.test_full_address", "macro_sql": "{% macro test_full_address() %}\n\n  {% set input_data %}\n    [ STRUCT(\n        \"home\" AS `use`,\n        [\"615 Synthea Lane\", \"Suite 4\"] AS `line`,\n        \"Boston\" AS `city`,\n        \"Massachusetts\" AS `state`,\n        \"US\" AS `country`,\n        \"02111\" AS `postalCode`\n      ),\n      STRUCT(\n        \"work\" AS `use`,\n        [\"1 Main Road\"] AS `line`,\n        \"Boston\" AS `city`,\n        \"Massachusetts\" AS `state`,\n        \"US\" AS `country`,\n        \"02222\" AS `postalCode`\n      )\n    ] as `address`\n  {% endset %}\n\n  {% set tests = {\n    'return_home_address': {\n      'test': fhir_dbt_utils.full_address(),\n      'expect': '615 Synthea Lane, Suite 4, Boston, Massachusetts, 02111, US'\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.full_address", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0083036, "supported_languages": null}, "macro.dbt_dataset.test_find_first_of": {"name": "test_find_first_of", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_string_macros/test_find_first_of.sql", "original_file_path": "macros/test_string_macros/test_find_first_of.sql", "unique_id": "macro.dbt_dataset.test_find_first_of", "macro_sql": "{% macro test_find_first_of() %}\n\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.find_first_of(\"foobar\", \"f\"), 0) }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.find_first_of(\"foobar\", \"o\"), 1) }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.find_first_of(\"foobar\", \"br\"), 3) }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.find_first_of(\"foobar\", \"c\"), -1) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_utils.find_first_of"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.00959, "supported_languages": null}, "macro.dbt_dataset.test_quote_array": {"name": "test_quote_array", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_string_macros/test_quote_array.sql", "original_file_path": "macros/test_string_macros/test_quote_array.sql", "unique_id": "macro.dbt_dataset.test_quote_array", "macro_sql": "{% macro test_quote_array() -%}\n\n  {{ dbt_unittest.assert_equals(fhir_dbt_utils.quote_array([]), []) }}\n  {{ dbt_unittest.assert_equals(fhir_dbt_utils.quote_array([\"foo\"]), [\"'foo'\"]) }}\n  {{ dbt_unittest.assert_equals(fhir_dbt_utils.quote_array([\"foo\", \"bar\"]), [\"'foo'\", \"'bar'\"]) }}\n\n  {{ return(adapter.dispatch('test_quote_array', 'fhir_dbt_utils') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_utils.quote_array", "macro.dbt_dataset.default__test_quote_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0120225, "supported_languages": null}, "macro.dbt_dataset.default__test_quote_array": {"name": "default__test_quote_array", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_string_macros/test_quote_array.sql", "original_file_path": "macros/test_string_macros/test_quote_array.sql", "unique_id": "macro.dbt_dataset.default__test_quote_array", "macro_sql": "{% macro default__test_quote_array() -%}\n  {{ dbt_unittest.assert_equals(fhir_dbt_utils.quote_array([\"f'o'o\"]), [\"'f\\\\'o\\\\'o'\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_utils.quote_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0128808, "supported_languages": null}, "macro.dbt_dataset.spark__test_quote_array": {"name": "spark__test_quote_array", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_string_macros/test_quote_array.sql", "original_file_path": "macros/test_string_macros/test_quote_array.sql", "unique_id": "macro.dbt_dataset.spark__test_quote_array", "macro_sql": "{% macro spark__test_quote_array() -%}\n  {{ dbt_unittest.assert_equals(fhir_dbt_utils.quote_array([\"f'o'o\"]), [\"'f''o''o'\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_utils.quote_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.013364, "supported_languages": null}, "macro.dbt_dataset.test_camel_case_to_snake_case": {"name": "test_camel_case_to_snake_case", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_string_macros/test_camel_case_to_snake_case.sql", "original_file_path": "macros/test_string_macros/test_camel_case_to_snake_case.sql", "unique_id": "macro.dbt_dataset.test_camel_case_to_snake_case", "macro_sql": "{% macro test_camel_case_to_snake_case() %}\n\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.camel_case_to_snake_case(\"abc\"), \"abc\") }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.camel_case_to_snake_case(\"Abc\"), \"abc\") }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.camel_case_to_snake_case(\"AbC\"), \"ab_c\") }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.camel_case_to_snake_case(\"foo_bar\"), \"foo_bar\") }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.camel_case_to_snake_case(\"FooBar\"), \"foo_bar\") }}\n    {{ dbt_unittest.assert_equals(fhir_dbt_utils.camel_case_to_snake_case(\"FoObAr\"), \"fo_ob_ar\") }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unittest.assert_equals", "macro.fhir_dbt_utils.camel_case_to_snake_case"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.01489, "supported_languages": null}, "macro.dbt_dataset.test_snake_case_to_proper_case": {"name": "test_snake_case_to_proper_case", "resource_type": "macro", "package_name": "dbt_dataset", "path": "macros/test_string_macros/test_snake_case_to_proper_case.sql", "original_file_path": "macros/test_string_macros/test_snake_case_to_proper_case.sql", "unique_id": "macro.dbt_dataset.test_snake_case_to_proper_case", "macro_sql": "{% macro test_snake_case_to_proper_case() %}\n\n  {% set input_data %}\n    \"foo\" AS `foo`,\n    \"foo_bar\" AS `foo_bar`\n  {% endset %}\n\n  {% set tests = {\n    'lower_case': {\n      'test': fhir_dbt_utils.snake_case_to_proper_case('foo'),\n      'expect': \"Foo\"\n    },\n    'snake_case': {\n      'test': fhir_dbt_utils.snake_case_to_proper_case('foo_bar'),\n      'expect': \"Foo Bar\"\n    }\n  } %}\n\n  {{ perform_tests(input_data, tests) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.snake_case_to_proper_case", "macro.dbt_dataset.perform_tests"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.01609, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0276973, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0550466, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0576077, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0597746, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0612319, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0670738, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0677917, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0688446, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0691466, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0695822, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0699298, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0702448, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0705485, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0709128, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0727127, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0739586, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0744457, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0754566, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0763717, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0783355, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0787988, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0794704, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0805826, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0813286, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.082238, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.084427, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0852747, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0861554, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0900307, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0928125, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0941386, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0960882, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0975132, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0981934, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0988326, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.0996592, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1005437, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1025298, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1044462, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1054494, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1063306, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.10705, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1080525, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1085806, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1102245, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1106117, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1112764, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1118505, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.11274, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1143694, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1152444, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1293275, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1305242, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1350348, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1359854, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1365612, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1384625, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1390734, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1397157, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1425838, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.145901, "supported_languages": ["sql"]}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.14728, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1478412, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1506186, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1603174, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1620831, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1650202, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1675458, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1841762, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.187707, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.1979506, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2034068, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2056718, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2099938, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2135582, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2175994, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.219498, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.223951, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2259657, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2274115, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2305825, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2318738, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.232796, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.240097, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2454293, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.248975, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2498894, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2554631, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2576182, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2588458, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.260481, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.262089, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2650084, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2659156, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2736142, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2742722, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2754185, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2773886, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.278588, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2796798, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2837827, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2856178, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2865045, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2883499, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2895818, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2933483, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2952197, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.2994018, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3026373, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.303464, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3041615, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3046975, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.30539, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3057723, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.306592, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3078153, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3210514, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.321943, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.323082, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.324645, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.325585, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3271818, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3287773, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3299665, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3310032, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3318534, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.33274, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3339434, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3344402, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3347983, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3352838, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3363807, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3368096, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.337098, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3406224, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3410985, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3417065, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3421123, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3433628, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.344224, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.344975, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3461864, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3467598, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3473287, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3477583, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3483374, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3500807, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.35051, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3510418, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.352043, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3588715, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.366908, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.368351, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3693063, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3701158, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3710456, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3723164, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3733451, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3748665, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3758316, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.377281, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3821135, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3828359, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3836634, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.385777, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3867364, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3874667, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3882406, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3889065, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3909106, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3925319, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3936245, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.3946002, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.399551, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4023874, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4034228, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4037051, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4041553, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.404459, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4048302, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4050655, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4062836, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4066844, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4071057, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.407541, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4080875, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4093456, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.410467, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4113443, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4128346, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4143841, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4158337, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.416456, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4171264, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4179792, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4187276, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4198594, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4207737, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4215846, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.422116, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.422724, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4233062, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4239886, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4249694, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4255583, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4259212, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4276848, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4282885, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.429051, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.430216, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4308197, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.432193, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4327028, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4333098, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4336188, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4341347, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4344852, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.434976, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4352734, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4360008, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4365494, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.436862, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4387102, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4390397, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4394636, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4397962, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4401572, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4404767, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.4408233, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5589323, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5596402, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5602565, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.560846, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5613523, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5618927, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.562392, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5634997, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5637994, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5643382, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5646174, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5652106, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5655434, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5660217, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5661948, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.567372, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.568221, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5687113, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.568883, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5694687, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5697603, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.570311, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5706115, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5711854, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5717962, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5724804, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5728285, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5733511, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5736856, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5742357, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5745323, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.57546, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5765681, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5776672, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5820875, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5828795, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5834055, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5837433, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5840478, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5848935, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5852234, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5856006, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5864499, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.587063, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5876794, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5905604, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.5999637, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6021376, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6024199, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.603599, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6039786, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6042626, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.607679, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6095908, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6111622, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6144242, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.61484, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6158283, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6182797, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.619897, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6204379, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6208532, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6281419, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6292565, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.629753, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.630633, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.63094, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.637281, "supported_languages": ["sql"]}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6382272, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6385949, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.639445, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6397617, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6407292, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.641151, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6532776, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.654143, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6548045, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6582646, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6592555, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6618145, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6631098, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6637301, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6644871, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6648045, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6848848, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6884627, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6891546, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6913586, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6919558, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6941075, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6971433, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6979136, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6983225, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6994, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.6998897, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7005022, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7009008, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7014241, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7018046, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7022593, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7032485, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7046556, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.713328, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.715876, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7184362, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7204041, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7232661, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7244465, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7258134, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7263207, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7291067, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7543485, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7662013, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.766853, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7672963, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7675266, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7678533, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7682078, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.768646, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.770446, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7708619, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.771472, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7724445, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7866971, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7937055, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7944398, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7952924, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.797717, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.7984855, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.799045, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8021371, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.808637, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8104057, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8114495, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8129313, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8139977, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8190806, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.820047, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.821079, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.840484, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8426344, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8436031, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8452978, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8460405, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8464997, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8468475, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8471076, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8475175, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8477864, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8487833, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.849183, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.852989, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8690248, "supported_languages": ["sql"]}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8724685, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8728316, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.874487, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.875578, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.877645, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8796046, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8801157, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8830214, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8843503, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8862329, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.8877757, "supported_languages": null}, "macro.fhir_dbt_utils.has_value": {"name": "has_value", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/has_value.sql", "original_file_path": "macros/fhir_analysis_macros/has_value.sql", "unique_id": "macro.fhir_dbt_utils.has_value", "macro_sql": "\n\n{%- macro has_value(\n  field_name,\n  null_values=var('null_values')\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- if field_name is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: field_name argument must be a string. Got: \" ~ field_name) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n    {{field_name}} IS NOT NULL\n  {%- if null_values|length > 0 %}\n    AND {{field_name}} NOT IN ('{{null_values|join(\"', '\")}}')\n  {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL for evaluating whether a field has a value recorded, returning TRUE if it does and\nFALSE if does not.\n\nA field is evaluated as not recorded if it is NULL or contains a value matching any value\nwithin the `null_values` list argument.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "FHIR field to evaluate."}, {"name": "null_values", "type": "list", "description": "List of string values considered as NULL. If `field_name` matches any of these values, the\nSQL will return FALSE. Default; `null_values` project variable.\n"}], "created_at": 1700054013.856144, "supported_languages": null}, "macro.fhir_dbt_utils.length_of_stay": {"name": "length_of_stay", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/length_of_stay.sql", "original_file_path": "macros/fhir_analysis_macros/length_of_stay.sql", "unique_id": "macro.fhir_dbt_utils.length_of_stay", "macro_sql": "\n\n{%- macro length_of_stay(\n  date_part='DAY',\n  los_for_ongoing_encounters=False\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- set errors = [] -%}\n\n  {%- if date_part is not string -%}\n    {%- do errors.append(\"date_part argument must be a string. Got: \" ~ date_part) -%}\n  {%- elif date_part not in ('DAY', 'WEEK', 'ISOWEEK', 'MONTH', 'QUARTER', 'YEAR', 'ISOYEAR') -%}\n      {{ errors.append(\"date_part must be one of 'DAY', 'WEEK', 'ISOWEEK', 'MONTH', 'QUARTER', 'YEAR' or 'ISOYEAR'. Got \" ~ date_part) }}\n  {%- endif -%}\n\n  {%- if los_for_ongoing_encounters is not boolean -%}\n    {%- do errors.append(\"los_for_ongoing_encounters argument must be a boolean (True/False). Got: \" ~ los_for_ongoing_encounters) -%}\n  {%- endif -%}\n\n  {%- do exceptions.raise_compiler_error(\"Macro input error(s):\\n\" ~ errors|join('. \\n')) if errors -%}\n\n\n{#- Macro logic -#}\n\n  {%- if los_for_ongoing_encounters == True -%}\n    {%- set snapshot_date = fhir_dbt_utils.get_snapshot_date() -%}\n\n    DATE_DIFF(\n      COALESCE( {{ fhir_dbt_utils.string_to_date('period.end') }}, {{snapshot_date}} ),\n      {{ fhir_dbt_utils.string_to_date('period.start') }},\n      {{date_part}}\n  )\n\n  {%- else -%}\n\n    DATE_DIFF(\n      {{ fhir_dbt_utils.string_to_date('period.end') }},\n      {{ fhir_dbt_utils.string_to_date('period.start') }},\n      {{date_part}}\n    )\n\n  {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.get_snapshot_date", "macro.fhir_dbt_utils.string_to_date"]}, "description": "Prints SQL for calculating the length of stay for an encounter from the `Encounter.period`\nFHIR field.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "date_part", "type": "string", "description": "The date unit for which to calculate length of stay. Default; DAY. Accecpted values: DAY,\nWEEK, MONTH, QUARTER, YEAR.\n"}, {"name": "los_for_ongoing_encounters", "type": "boolean", "description": "Whether to calculate length of stay for encounters that are still ongoing (`period.end` is\nNULL). For such encounters, the length of stay is calculated from the `period.start` date\nto the `snapshot_date` project variable or to today's date if `snapshot_date` is not set.\nDefault; False.\n"}], "created_at": 1700054013.861454, "supported_languages": null}, "macro.fhir_dbt_utils.metric_hour": {"name": "metric_hour", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/metric_hour.sql", "original_file_path": "macros/fhir_analysis_macros/metric_hour.sql", "unique_id": "macro.fhir_dbt_utils.metric_hour", "macro_sql": "\n\n{%- macro metric_hour(metric_date_columns, date_column_data_type) -%}\n{%- if metric_date_columns == None %}\n    CAST(NULL AS TIMESTAMP)\n{%- else -%}\n    {%- if metric_date_columns | length > 1 -%}\n      {%- set date_column = \"COALESCE(\" + metric_date_columns|join(\", \") + \")\" -%}\n    {%- else %}\n      {%- set date_column = metric_date_columns[0] -%}\n    {%- endif -%}\n    {{ fhir_dbt_utils.local_hour(date_column, date_column_data_type) }}\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.local_hour"]}, "description": "Prints SQL for returning the local hour from an ordered list of FHIR fields.\n\nIt is used for returning the most clinically-relevant local hour for a given FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "metric_date_fields", "type": "list", "description": "Ordered list of fields to use to derive the metric date.\n"}, {"name": "date_field_data_type", "type": "string", "description": "The datatype of `metric_date_fields`.\n"}], "created_at": 1700054013.8701227, "supported_languages": null}, "macro.fhir_dbt_utils.local_date": {"name": "local_date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/local_date.sql", "original_file_path": "macros/fhir_analysis_macros/local_date.sql", "unique_id": "macro.fhir_dbt_utils.local_date", "macro_sql": "{% macro local_date(date_column, date_column_data_type) -%}\n\n{%- set timezone = \"'\" ~ var('timezone_default') ~ \"'\" -%}\n\n{%- if date_column_data_type == 'TIMESTAMP' -%}\n    {{ fhir_dbt_utils.date(\n      date_column,\n      timezone ) }}\n{%- else -%}\n    IF(\n      CHAR_LENGTH({{ date_column }}) = 10,\n      {{ fhir_dbt_utils.safe_cast_as_date(date_column) }},\n      {{ fhir_dbt_utils.date(\n        fhir_dbt_utils.safe_cast_as_timestamp(date_column),\n        timezone ) }}\n    )\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.date", "macro.fhir_dbt_utils.safe_cast_as_date", "macro.fhir_dbt_utils.safe_cast_as_timestamp"]}, "description": "Prints SQL for returning the local date from a FHIR field.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "date_field", "type": "string", "description": "Field to use to derive the metric date.\n"}, {"name": "date_field_data_type", "type": "string", "description": "The datatype of `date_field`.\n"}], "created_at": 1700054013.86468, "supported_languages": null}, "macro.fhir_dbt_utils.local_hour": {"name": "local_hour", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/local_hour.sql", "original_file_path": "macros/fhir_analysis_macros/local_hour.sql", "unique_id": "macro.fhir_dbt_utils.local_hour", "macro_sql": "{% macro local_hour(date_column, date_column_data_type) -%}\n\n{%- set timezone = \"'\" ~ var('timezone_default') ~ \"'\" -%}\n\n{%- if date_column_data_type == 'TIMESTAMP' -%}\n    {{ fhir_dbt_utils.timestamp_trunc(\n        \"hour\",\n        date_column,\n        timezone ) }}\n{%- else -%}\n    IF(\n      CHAR_LENGTH({{ date_column }}) = 10,\n      {{ fhir_dbt_utils.safe_cast_as_timestamp('NULL') }},\n      {{ fhir_dbt_utils.timestamp_trunc(\n          \"hour\",\n          fhir_dbt_utils.safe_cast_as_timestamp(date_column),\n          timezone ) }}\n    )\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.timestamp_trunc", "macro.fhir_dbt_utils.safe_cast_as_timestamp"]}, "description": "Prints SQL for returning the local hour from a FHIR field.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "date_field", "type": "string", "description": "Field to use to derive the metric date.\n"}, {"name": "date_field_data_type", "type": "string", "description": "The datatype of `date_field`.\n"}], "created_at": 1700054013.8662858, "supported_languages": null}, "macro.fhir_dbt_utils.bucket": {"name": "bucket", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/bucket.sql", "original_file_path": "macros/fhir_analysis_macros/bucket.sql", "unique_id": "macro.fhir_dbt_utils.bucket", "macro_sql": "\n\n{%- macro bucket(\n  field,\n  boundaries_array=[00, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- if boundaries_array is not iterable -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: boundaries_array argument must be an array (e.g. [10, 20]). Got: \" ~ boundaries_array) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  CASE RANGE_BUCKET({{field}}, {{boundaries_array}})\n    WHEN 0 THEN '< {{boundaries_array[0]}}'\n  {% for i in range(1, boundaries_array|length) -%}\n    WHEN {{i}} THEN '{{boundaries_array[i-1]}} - {{boundaries_array[i]}}'\n  {% endfor -%}\n    WHEN {{boundaries_array|length}} THEN '>= {{boundaries_array[-1]}}'\n  ELSE NULL END\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL to group values within a numerical field into ordinal buckets, returning a string\ndenoting the bucket range (e.g. \"10 - 20\").\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "field", "type": "string", "description": "Field containing numerical values to be grouped."}, {"name": "boundaries_array", "type": "list", "description": "List of numbers to be the boundaries for bucketing. For example, \"[1, 5, 10]\" would group\nvalues into the following buckets: \"< 1\", \"1 - 5\", \"5 - 10\", \"\"> 10\". The default is\n[00, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100].\n"}], "created_at": 1700054013.8457966, "supported_languages": null}, "macro.fhir_dbt_utils.age": {"name": "age", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/age.sql", "original_file_path": "macros/fhir_analysis_macros/age.sql", "unique_id": "macro.fhir_dbt_utils.age", "macro_sql": "\n\n{%- macro age(\n  date_of_birth_field='birthDate',\n  snapshot_date=None\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- if date_of_birth_field is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: birthDate argument must be a string. Got: \" ~ date_of_birth_field) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {%- set snapshot_date = fhir_dbt_utils.get_snapshot_date(snapshot_date) -%}\n\n  DATE_DIFF({{snapshot_date}}, DATE({{date_of_birth_field}}), YEAR) - IF(EXTRACT(DAYOFYEAR FROM DATE({{date_of_birth_field}})) > EXTRACT(DAYOFYEAR FROM DATE({{snapshot_date}})), 1, 0)\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.get_snapshot_date"]}, "description": "Prints SQL to calculate a patient's age on a specific date from their date of birth, returning\nan integer.\n\nThe date on which to calculate age is selected in the following priority order:\n\n(1) The `snapshot_date` argument provided to this macro, if specified.\n\n(2) The `snapshot_date` project variable, if specified.\n\n(3) Today's date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "date_of_birth_field", "type": "string", "description": "Field containing the patient's date of birth. Default argument is the `birthDate` field\nfrom the Patient FHIR resource.\n"}, {"name": "snapshot_date", "type": "string", "description": "Date on which to calculate patient age."}], "created_at": 1700054013.841836, "supported_languages": null}, "macro.fhir_dbt_utils.string_to_date": {"name": "string_to_date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/string_to_date.sql", "original_file_path": "macros/fhir_analysis_macros/string_to_date.sql", "unique_id": "macro.fhir_dbt_utils.string_to_date", "macro_sql": "\n\n{%- macro string_to_date(\n  date_field,\n  timezone=None\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- if date_field is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: date_field argument must be a string. Got: \" ~ date_field) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {%- if timezone == None -%}\n    {%- set timezone = var('timezone_default') -%}\n  {%- endif -%}\n\n  IF(\n    CHAR_LENGTH({{ date_field }}) = 10,\n    {{ fhir_dbt_utils.safe_cast_as_date(date_field) }},\n    {{ fhir_dbt_utils.date(\n      fhir_dbt_utils.safe_cast_as_timestamp(date_field),\n      \"'\" ~ timezone ~ \"'\")|indent(8) }}\n  )\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.safe_cast_as_date", "macro.fhir_dbt_utils.date", "macro.fhir_dbt_utils.safe_cast_as_timestamp"]}, "description": "Prints SQL for returning the local date from a field containing a date or datetime stored as a\nstring. \n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "date_field", "type": "string", "description": "Field containing dates or datetimes stored as strings."}, {"name": "timezone", "type": "string", "description": "The IANA time-zone name for this data. For example, \"Europe/London\". Defaults to the\n`timezone_default` project variable if not set.\n"}], "created_at": 1700054013.8736465, "supported_languages": null}, "macro.fhir_dbt_utils.value_from_component": {"name": "value_from_component", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/value_from_component.sql", "original_file_path": "macros/fhir_analysis_macros/value_from_component.sql", "unique_id": "macro.fhir_dbt_utils.value_from_component", "macro_sql": "\n\n{%- macro value_from_component(\n  code,\n  code_system,\n  return_field='quantity.value'\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- set errors = [] -%}\n\n  {%- if code is not string -%}\n    {%- do errors.append(\"code argument must be a string. Got: \" ~ code) -%}\n  {%- endif -%}\n\n  {%- if code_system is not string -%}\n    {%- do errors.append(\"code_system argument must be a string. Got: \" ~ code_system) -%}\n  {%- endif -%}\n\n  {%- if return_field is not string -%}\n    {%- do errors.append(\"return_field argument must be a string. Got: \" ~ return_field) -%}\n  {%- elif return_field not in ('quantity.value', 'string', 'boolean', 'integer', 'time', 'dateTime') -%}\n      {{ errors.append(\"return_field must be one of 'quantity.value', 'string', 'boolean', 'integer', 'time' or 'dateTime'. Got \" ~ return_field) }}\n  {%- endif -%}\n\n  {%- do exceptions.raise_compiler_error(\"Macro input error(s):\\n\" ~ errors|join('. \\n')) if errors -%}\n\n\n{#- Macro logic -#}\n\n  {%- set arrays = [\n        fhir_dbt_utils.array_config(field = \"component\", unnested_alias = \"c\"),\n        fhir_dbt_utils.array_config(field = \"c.code.coding\", unnested_alias = \"cc\")\n      ]\n  -%}\n\n  ({{ fhir_dbt_utils.select_from_unnest(\n        select = \"c.value.\" ~ return_field,\n        unnested = fhir_dbt_utils.unnest_multiple(arrays),\n        where = \"cc.system = '\" ~ code_system ~ \"' AND cc.code = '\" ~ code ~ \"'\",\n        order_by = \"cc.code\"\n      )\n  }})\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.array_config", "macro.fhir_dbt_utils.select_from_unnest", "macro.fhir_dbt_utils.unnest_multiple"]}, "description": "Prints SQL to extract a value from the FHIR `Observation.component` field.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "code", "type": "string", "description": "The code for which to return a value."}, {"name": "code_system", "type": "string", "description": "The code system that the code specified belongs to."}, {"name": "return_field", "type": "string", "description": "The value sub-field to return. Default; `quantity.value`."}], "created_at": 1700054013.874913, "supported_languages": null}, "macro.fhir_dbt_utils.identifier": {"name": "identifier", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/identifier.sql", "original_file_path": "macros/fhir_analysis_macros/identifier.sql", "unique_id": "macro.fhir_dbt_utils.identifier", "macro_sql": "\n\n{%- macro identifier(system) -%}\n\n{#- Validate input arguments -#}\n\n  {%- if system is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: system argument must be a string. Got: \" ~ system) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  (SELECT value FROM UNNEST(identifier) WHERE system = '{{system}}')\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL to return an identifier value for a specified system from a FHIR identifier field.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "system", "type": "string", "description": "Identifier system for which to return the identifier. For example:\n\"http://hl7.org/fhir/sid/us-ssn\".\n"}], "created_at": 1700054013.8582692, "supported_languages": null}, "macro.fhir_dbt_utils.alive": {"name": "alive", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/alive.sql", "original_file_path": "macros/fhir_analysis_macros/alive.sql", "unique_id": "macro.fhir_dbt_utils.alive", "macro_sql": "\n\n{%- macro alive(\n  date_of_death_field='deceased.dateTime',\n  snapshot_date=None\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- if date_of_death_field is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: date_of_death_field argument must be a string. Got: \" ~ date_of_death_field) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {%- set snapshot_date = fhir_dbt_utils.get_snapshot_date(snapshot_date) -%}\n\n  ({{date_of_death_field}} IS NULL OR DATE({{date_of_death_field}}) > {{snapshot_date}})\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.get_snapshot_date"]}, "description": "Prints SQL to evaluate whether a patient was alive on a given date, returning a boolean.\n\nThe date on which to evaluate is selected in the following priority order:\n\n(1) The `snapshot_date` argument provided to this macro, if specified.\n\n(2) The `snapshot_date` project variable, if specified.\n\n(3) Today's date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "date_of_death_field", "type": "string", "description": "Field containing the patient's date of death. Default argument is the `deceased.dateTime`\nfield from the Patient FHIR resource.\n"}, {"name": "snapshot_date", "type": "string", "description": "Date on which to evaluate whether a patient was alive."}], "created_at": 1700054013.8434877, "supported_languages": null}, "macro.fhir_dbt_utils.official_name": {"name": "official_name", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/official_name.sql", "original_file_path": "macros/fhir_analysis_macros/official_name.sql", "unique_id": "macro.fhir_dbt_utils.official_name", "macro_sql": "\n\n{%- macro official_name(\n  include_prefix=True,\n  include_suffix=True,\n  include_middle_names=True\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- set errors = [] -%}\n\n  {%- if include_prefix is not boolean -%}\n    {%- do errors.append(\"include_prefix argument must be a string. Got: \" ~ include_prefix) -%}\n  {%- endif -%}\n\n  {%- if include_suffix is not boolean -%}\n    {%- do errors.append(\"include_suffix argument must be a string. Got: \" ~ include_suffix) -%}\n  {%- endif -%}\n\n  {%- if include_middle_names is not boolean -%}\n    {%- do errors.append(\"include_middle_names argument must be a string. Got: \" ~ include_middle_names) -%}\n  {%- endif -%}\n\n  {%- do exceptions.raise_compiler_error(\"Macro input error(s):\\n\" ~ errors|join('. \\n')) if errors -%}\n\n\n{#- Macro logic -#}\n\n  CONCAT(\n  {% if include_prefix == True -%}\n    (SELECT ARRAY_TO_STRING(prefix, ' ') FROM UNNEST(name) WHERE use = 'official'), ' ',\n  {% endif -%}\n  {% if include_middle_names == True -%}\n    (SELECT ARRAY_TO_STRING(given, ' ') FROM UNNEST(name) WHERE use = 'official'),\n  {% else -%}\n    (SELECT given[SAFE_OFFSET(0)] FROM UNNEST(name) WHERE use = 'official'),\n  {% endif -%}\n    ' ', (SELECT family FROM UNNEST(name) WHERE use = 'official')\n  {% if include_suffix == True -%}\n    ,' ', (SELECT ARRAY_TO_STRING(suffix, ' ') FROM UNNEST(name) WHERE use = 'official')\n  {% endif -%}\n  )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL for extracting a full official name from the `name` FHIR field.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "include_prefix", "type": "boolean", "description": "Whether to include prefixes (e.g. \"Mrs\") in the returned name. Default; True."}, {"name": "include_suffix", "type": "boolean", "description": "Whether to include suffixes (e.g. \"Jr\") in the returned name. Default; True."}, {"name": "include_middle_names", "type": "boolean", "description": "Whether to include middle names in the returned name. Default; True."}], "created_at": 1700054013.8724337, "supported_languages": null}, "macro.fhir_dbt_utils.metric_date": {"name": "metric_date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/metric_date.sql", "original_file_path": "macros/fhir_analysis_macros/metric_date.sql", "unique_id": "macro.fhir_dbt_utils.metric_date", "macro_sql": "\n\n{%- macro metric_date(metric_date_columns, date_column_data_type) -%}\n{%- if metric_date_columns == None %}\n    CAST(NULL AS DATE)\n{%- else -%}\n    {%- if metric_date_columns | length > 1 -%}\n      {%- set date_column = \"COALESCE(\" + metric_date_columns|join(\", \") + \")\" -%}\n    {%- else %}\n      {%- set date_column = metric_date_columns[0] -%}\n    {%- endif -%}\n      {{ fhir_dbt_utils.local_date(date_column, date_column_data_type) }}\n{%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.local_date"]}, "description": "Prints SQL for returning the local date from an ordered list of FHIR fields.\n\nIt is used for returning the most clinically-relevant local date for a given FHIR resource.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "metric_date_fields", "type": "list", "description": "Ordered list of fields to use to derive the metric date.\n"}, {"name": "date_field_data_type", "type": "string", "description": "The datatype of `metric_date_fields`.\n"}], "created_at": 1700054013.8686666, "supported_languages": null}, "macro.fhir_dbt_utils.full_address": {"name": "full_address", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/full_address.sql", "original_file_path": "macros/fhir_analysis_macros/full_address.sql", "unique_id": "macro.fhir_dbt_utils.full_address", "macro_sql": "\n\n{%- macro full_address() -%}\n\n  (SELECT ARRAY_TO_STRING(ARRAY_CONCAT(line, [city, state, postalCode, country]), ', ') FROM UNNEST(address) ORDER BY use = 'home' DESC LIMIT 1)\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL for extracting a full address string from the `address` FHIR field. For example:\n\"615 Synthea Lane, Suite 4, Boston, Massachusetts, 02111, US\"\n\nThe macro preferentially extracts a home address if recorded (`address.use` = \"home\").\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.8537116, "supported_languages": null}, "macro.fhir_dbt_utils.code_from_codeableconcept": {"name": "code_from_codeableconcept", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "original_file_path": "macros/fhir_analysis_macros/code_from_codeableconcept.sql", "unique_id": "macro.fhir_dbt_utils.code_from_codeableconcept", "macro_sql": "\n\n{%- macro code_from_codeableconcept(\n  field_name,\n  code_system,\n  fhir_resource=None,\n  return_field='code',\n  is_array=None\n) -%}\n\n{#- Validate input arguments -#}\n\n  {%- set errors = [] -%}\n\n  {%- if field_name is not string -%}\n    {%- do errors.append(\"field_name argument must be a string. Got: \" ~ field_name) -%}\n  {%- endif -%}\n\n  {%- if code_system is not string -%}\n    {%- do errors.append(\"code_system argument must be a string. Got: \" ~ code_system) -%}\n  {%- endif -%}\n\n  {%- if fhir_resource != None and fhir_resource is not string -%}\n    {%- do errors.append(\"fhir_resource argument must be a string. Got: \" ~ fhir_resource) -%}\n  {%- endif -%}\n\n  {%- if return_field is not string -%}\n    {%- do errors.append(\"return_field argument must be a string. Got: \" ~ return_field) -%}\n  {%- elif return_field not in ('code', 'display') -%}\n    {%- do errors.append(\"return_field must be one of 'code' or 'display'. Got \" ~ return_field) -%}\n  {%- endif -%}\n\n  {%- if is_array != None and is_array is not boolean -%}\n    {%- do errors.append(\"is_array argument must be a boolean (True/False). Got: \" ~ is_array) -%}\n  {%- endif -%}\n\n  {%- do exceptions.raise_compiler_error(\"Macro input error(s):\\n\" ~ errors|join('. \\n')) if errors -%}\n\n\n{#- Macro logic -#}\n\n  {#- Validate that the field is a codeableConcept -#}\n\n  {%- set fhir_resource = fhir_dbt_utils.get_fhir_resource(fhir_resource) -%}\n  {%- set datatype_dict = fhir_dbt_utils.get_datatype_dict(fhir_resource) -%}\n\n  {%- if execute\n    and var('assume_fields_exist') == False\n    and (\n        field_name~'.coding.code' not in datatype_dict or\n        field_name~'.coding.system' not in datatype_dict\n      )\n  -%}\n    {{ return(\"'missing_or_invalid_codeableconcept_field: \"~field_name~\"'\") }}\n  {%- endif -%}\n\n\n  {#- Identify whether the field is an array -#}\n\n  {%- if is_array != None %}\n    {%- set field_is_array = is_array -%}\n  {%- else %}\n    {%- set field_is_array = fhir_dbt_utils.field_is_array(field_name) -%}\n  {%- endif %}\n\n\n  {#- Construct SQL -#}\n\n  {%- if field_is_array %}\n    {%- set arrays = [\n          fhir_dbt_utils.array_config(field = field_name, unnested_alias = \"f\"),\n          fhir_dbt_utils.array_config(field = \"f.coding\", unnested_alias = \"c\")\n        ]\n    -%}\n  {%- else %}\n    {%- set arrays = [\n          fhir_dbt_utils.array_config(field = field_name~\".coding\", unnested_alias = \"c\")\n        ]\n    -%}\n  {%- endif -%}\n\n  ({{ fhir_dbt_utils.select_from_unnest(\n        select = \"c.\" ~ return_field,\n        unnested = fhir_dbt_utils.unnest_multiple(arrays),\n        where = \"c.system = '\" ~ code_system ~ \"'\",\n        order_by = \"c.code\"\n      )\n  }})\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.get_fhir_resource", "macro.fhir_dbt_utils.get_datatype_dict", "macro.fhir_dbt_utils.field_is_array", "macro.fhir_dbt_utils.array_config", "macro.fhir_dbt_utils.select_from_unnest", "macro.fhir_dbt_utils.unnest_multiple"]}, "description": "Prints SQL to extract a code for a specified code system from a FHIR codeableConcept field.\n\nIf `coding.code` is not informative, then can return `coding.display` instead by setting the\n`return_field` argument to 'display'.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "FHIR field that is of type codeableConcept. If this field in an array, then the macro will\nunnest this field.\n"}, {"name": "code_system", "type": "string", "description": "Coding system to filter the search of the codeableConcept field.\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `field_name` exists. If not specified,\nthe macro will default to using the `primary_resource` speficied in the model\nmetadata.\n"}, {"name": "return_field", "type": "string", "description": "If set to 'display', the macro will return the `coding.display` field from the\ncodeableConcept. By default, `coding.code` will be returned.\n"}, {"name": "is_array", "type": "boolean", "description": "Whether the top level FHIR field (specified by the `field_name` argument) is an array. If \nset to True, the macro will unnest this field. If this argument is not provided, the macro\nwill determine whether the field in an array using the `field_is_array` macro. This\nargument only needs to be provided during testing.\n"}], "created_at": 1700054013.8524492, "supported_languages": null}, "macro.fhir_dbt_utils.camel_case_to_snake_case": {"name": "camel_case_to_snake_case", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/string_macros/camel_case_to_snake_case.sql", "original_file_path": "macros/string_macros/camel_case_to_snake_case.sql", "unique_id": "macro.fhir_dbt_utils.camel_case_to_snake_case", "macro_sql": "{% macro camel_case_to_snake_case(str) %}\n    {#- Add underscore before capital letters which follow lowercase letters -#}\n    {% set str = modules.re.sub(\"([a-z])([A-Z])\", \"\\\\1_\\\\2\", str) %}\n    {#- Lower case the string -#}\n    {{ return(str | lower) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns a snake_case version of a CamelCase string.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "str", "type": "string", "description": "String in CamelCase to be converted to snake_case."}], "created_at": 1700054013.8948336, "supported_languages": null}, "macro.fhir_dbt_utils.quote_array": {"name": "quote_array", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/string_macros/quote_array.sql", "original_file_path": "macros/string_macros/quote_array.sql", "unique_id": "macro.fhir_dbt_utils.quote_array", "macro_sql": "{% macro quote_array(x) %}\n  {% set result=[] %}\n  {% for i in x %}\n    {{ result.append(\"'\" ~ dbt.escape_single_quotes(i) ~ \"'\") }}\n  {% endfor %}\n  {% do return (result) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes"]}, "description": "Returns an array with each string wrapped in single quotes.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "x", "type": "list", "description": "List of strings to be quoted."}], "created_at": 1700054013.8981748, "supported_languages": null}, "macro.fhir_dbt_utils.find_first_of": {"name": "find_first_of", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/string_macros/find_first_of.sql", "original_file_path": "macros/string_macros/find_first_of.sql", "unique_id": "macro.fhir_dbt_utils.find_first_of", "macro_sql": "{% macro find_first_of(haystack, letters) %}\n  {% for i in range(0, haystack|length)\n     if haystack[i] in letters %}\n    {{ return (i) }}\n  {% endfor %}\n  {{ return(-1) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns position of the first occurrence of a given list of letters in a string.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "haystack", "type": "string", "description": "String to search through."}, {"name": "letters", "type": "string", "description": "Letters to search for."}], "created_at": 1700054013.8970506, "supported_languages": null}, "macro.fhir_dbt_utils.snake_case_to_proper_case": {"name": "snake_case_to_proper_case", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/string_macros/snake_case_to_proper_case.sql", "original_file_path": "macros/string_macros/snake_case_to_proper_case.sql", "unique_id": "macro.fhir_dbt_utils.snake_case_to_proper_case", "macro_sql": "\n\n{%- macro snake_case_to_proper_case(snake_case_column) -%}\nREPLACE(INITCAP({{ snake_case_column }}), '_', ' ')\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL for converting a snake_case column (e.g. encounter_class) to Proper Case (e.g\nEncounter Class).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "snake_case_column", "type": "string", "description": "Column with snake_case value to be converted to Proper Case."}], "created_at": 1700054013.8993533, "supported_languages": null}, "macro.fhir_dbt_utils.model_metadata": {"name": "model_metadata", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/model_metadata.sql", "original_file_path": "macros/infrastructure_macros/model_metadata.sql", "unique_id": "macro.fhir_dbt_utils.model_metadata", "macro_sql": "{% macro model_metadata(meta_key, value_if_missing=None) %}\n\n{#- Validate input arguments -#}\n\n  {%- set errors = [] -%}\n\n  {%- if meta_key is not string -%}\n    {%- do exceptions.raise_compiler_error(\"meta_key argument must be a string. Got: \" ~ meta_key) -%}\n\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {%- if execute -%}\n\n    {% set meta_value = model.config.meta[meta_key] %}\n\n    {% if not meta_value %}\n\n      {%- do exceptions.warn(\"Value not found for key in model metadata\") -%}\n      {%- do return(value_if_missing) -%}\n\n    {% else %}\n\n      {% do return(meta_value) %}\n\n    {% endif %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns the value for a specified key defined in the current dbt model's metadata config.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "meta_key", "type": "string", "description": "Meta key for which to return the value (e.g. primary_resource)"}, {"name": "value_if_missing", "type": "string", "description": "Default value to return when no value is returned for the specified key."}], "created_at": 1700054013.8889797, "supported_languages": null}, "macro.fhir_dbt_utils.get_metric_date_columns": {"name": "get_metric_date_columns", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/get_metric_date_columns.sql", "original_file_path": "macros/infrastructure_macros/get_metric_date_columns.sql", "unique_id": "macro.fhir_dbt_utils.get_metric_date_columns", "macro_sql": "\n\n{%- macro get_metric_date_columns() -%}\n\n  {% set columns = fhir_dbt_utils.model_metadata('metric_date_columns') -%}\n  {% if not columns %}\n    {{ return(None) }}\n  {% endif %}\n\n  {% if var('fhir_version') == 'STU3' %}\n    {% if columns == ['recordedDate'] %}\n      {{ return(['assertedDate']) }}\n    {% endif %}\n  {% endif %}\n\n  {{ return(columns if columns|length else None) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.model_metadata"]}, "description": "Returns the metric date columns specified in the model metadata.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.8853066, "supported_languages": null}, "macro.fhir_dbt_utils.field_exists": {"name": "field_exists", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/field_exists.sql", "original_file_path": "macros/infrastructure_macros/field_exists.sql", "unique_id": "macro.fhir_dbt_utils.field_exists", "macro_sql": "\n\n{%- macro field_exists(field_name, fhir_resource=None) -%}\n\n{#- Validate input arguments -#}\n\n  {%- set errors = [] -%}\n\n  {%- if field_name is not string -%}\n    {%- do errors.append(\"field_name argument must be a string. Got: \" ~ field_name) -%}\n  {%- endif -%}\n\n  {%- if fhir_resource != None and fhir_resource is not string -%}\n    {%- do errors.append(\"fhir_resource argument must be a string. Got: \" ~ fhir_resource) -%}\n  {%- endif -%}\n\n  {%- do exceptions.raise_compiler_error(\"Macro input error(s):\\n\" ~ errors|join('. \\n')) if errors -%}\n\n\n{#- Macro logic -#}\n\n  {%- if var('assume_fields_exist') -%}\n    {% do return (True) %}\n  {%- endif -%}\n\n  {% set fhir_resource = fhir_dbt_utils.get_fhir_resource(fhir_resource) %}\n\n  {% set datatype_dict = fhir_dbt_utils.get_datatype_dict(fhir_resource) %}\n\n  {% set field_exists = field_name in datatype_dict %}\n\n  {% do return(field_exists) %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.get_fhir_resource", "macro.fhir_dbt_utils.get_datatype_dict"]}, "description": "Returns TRUE if a specified field exists within a FHIR resource view.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "Field name to evaluate. Can be a top-level field (e.g. code) or a nested column (e.g.\ncode.coding.display).\n"}, {"name": "fhir_resource", "type": "string", "description": "The FHIR resource to check whether the specified `field_name` exists.  If not specified,\nthe macro will default to using the `fhir_resource` or the `primary_resource` specified in\nthe model metadata.\n"}], "created_at": 1700054013.8812473, "supported_languages": null}, "macro.fhir_dbt_utils.get_datatype_dict": {"name": "get_datatype_dict", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/get_datatype_dict.sql", "original_file_path": "macros/infrastructure_macros/get_datatype_dict.sql", "unique_id": "macro.fhir_dbt_utils.get_datatype_dict", "macro_sql": "{% macro get_datatype_dict(fhir_resource) %}\n\n{#- Validate input arguments -#}\n\n  {%- if fhir_resource is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: fhir_resource argument must be a string. Got: \" ~ fhir_resource) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {%- if execute -%}\n\n    {%- set relation = adapter.get_relation(\n          database = target.project,\n          schema = target.schema,\n          identifier = fhir_resource\n        )\n    -%}\n\n    {% if not relation %}\n      {% do exceptions.warn(\"Relation not found for: \" ~ fhir_resource) %}\n      {% do return ({}) %}\n    {% endif %}\n\n    {%- set column_dict = {} -%}\n\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n    {% for top_level_column in columns %}\n      {%- do column_dict.update({top_level_column.name: top_level_column.data_type}) -%}\n      {% for column in fhir_dbt_utils.flatten_column(top_level_column) %}\n        {%- do column_dict.update({column.name: column.data_type}) -%}\n      {% endfor %}\n    {%- endfor -%}\n\n  {% endif %}\n\n  {%- do return(column_dict) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.flatten_column"]}, "description": "Returns a dictionary object containing all columns (keys) in a FHIR resource view and their\ndata types (values).\n\nIncluded in the dictionary are both top-level columns (e.g. code) and nested columns (e.g\ncode.coding.display).\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "The FHIR resource from which to return a dictionary of columns contained in the FHIR\nresource view.\n\nIf not specified, the macro will default to using the `primary_resource` specified in the\nmodel metadata.\n"}], "created_at": 1700054013.8827548, "supported_languages": null}, "macro.fhir_dbt_utils.field_is_array": {"name": "field_is_array", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/field_is_array.sql", "original_file_path": "macros/infrastructure_macros/field_is_array.sql", "unique_id": "macro.fhir_dbt_utils.field_is_array", "macro_sql": "\n\n{%- macro field_is_array(field_name, fhir_resource=None) -%}\n\n{#- Validate input arguments -#}\n\n  {%- set errors = [] -%}\n\n  {%- if field_name is not string -%}\n    {%- do errors.append(\"field_name argument must be a string. Got: \" ~ field_name) -%}\n  {%- endif -%}\n\n  {%- if fhir_resource != None and fhir_resource is not string -%}\n    {%- do errors.append(\"fhir_resource argument must be a string. Got: \" ~ fhir_resource) -%}\n  {%- endif -%}\n\n  {%- do exceptions.raise_compiler_error(\"Macro input error(s):\\n\" ~ errors|join('. \\n')) if errors -%}\n\n\n{#- Macro logic -#}\n\n  {% set fhir_resource = fhir_dbt_utils.get_fhir_resource(fhir_resource) %}\n\n  {% set datatype_dict = fhir_dbt_utils.get_datatype_dict(fhir_resource) %}\n\n  {% set field_is_array =\n      field_name in datatype_dict\n      and datatype_dict[field_name].startswith('ARRAY')\n  %}\n\n  {% do return(field_is_array) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.get_fhir_resource", "macro.fhir_dbt_utils.get_datatype_dict"]}, "description": "Returns TRUE is the specified field is an array data type.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "field_name", "type": "string", "description": "FHIR field to evaluate whether it is an array."}, {"name": "fhir_resource", "type": "string", "description": "FHIR resource in which `field_name` is located. If not specified, the macro will default\nto using the `fhir_resource` or the `primary_resource` specified in the model metadata.\n"}], "created_at": 1700054013.8820524, "supported_languages": null}, "macro.fhir_dbt_utils.validate_fhir_resource_name": {"name": "validate_fhir_resource_name", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/validate_fhir_resource_name.sql", "original_file_path": "macros/infrastructure_macros/validate_fhir_resource_name.sql", "unique_id": "macro.fhir_dbt_utils.validate_fhir_resource_name", "macro_sql": "\n\n{%- macro validate_fhir_resource_name(fhir_resource) -%}\n\n  {%- if fhir_resource != None and fhir_resource not in (\n    'Account',\n    'ActivityDefinition',\n    'AdverseEvent',\n    'AllergyIntolerance',\n    'Appointment',\n    'AppointmentResponse',\n    'AuditEvent',\n    'Basic',\n    'Binary',\n    'BiologicallyDerivedProduct',\n    'BodyStructure',\n    'Bundle',\n    'CapabilityStatement',\n    'CarePlan',\n    'CareTeam',\n    'CatalogEntry',\n    'ChargeItem',\n    'ChargeItemDefinition',\n    'Claim',\n    'ClaimResponse',\n    'ClinicalImpression',\n    'CodeSystem',\n    'Communication',\n    'CommunicationRequest',\n    'CompartmentDefinition',\n    'Composition',\n    'ConceptMap',\n    'Condition',\n    'Consent',\n    'Contract',\n    'Coverage',\n    'CoverageEligibilityRequest',\n    'CoverageEligibilityResponse',\n    'DetectedIssue',\n    'Device',\n    'DeviceDefinition',\n    'DeviceMetric',\n    'DeviceRequest',\n    'DeviceUseStatement',\n    'DiagnosticReport',\n    'DocumentManifest',\n    'DocumentReference',\n    'EffectEvidenceSynthesis',\n    'Encounter',\n    'Endpoint',\n    'EnrollmentRequest',\n    'EnrollmentResponse',\n    'EpisodeOfCare',\n    'EventDefinition',\n    'Evidence',\n    'EvidenceVariable',\n    'ExampleScenario',\n    'ExplanationOfBenefit',\n    'FamilyMemberHistory',\n    'Flag',\n    'Goal',\n    'GraphDefinition',\n    'Group',\n    'GuidanceResponse',\n    'HealthcareService',\n    'ImagingStudy',\n    'Immunization',\n    'ImmunizationEvaluation',\n    'ImmunizationRecommendation',\n    'ImplementationGuide',\n    'InsurancePlan',\n    'Invoice',\n    'Library',\n    'Linkage',\n    'List',\n    'Location',\n    'Measure',\n    'MeasureReport',\n    'Media',\n    'Medication',\n    'MedicationAdministration',\n    'MedicationDispense',\n    'MedicationKnowledge',\n    'MedicationRequest',\n    'MedicationStatement',\n    'MedicinalProduct',\n    'MedicinalProductAuthorization',\n    'MedicinalProductContraindication',\n    'MedicinalProductIndication',\n    'MedicinalProductIngredient',\n    'MedicinalProductInteraction',\n    'MedicinalProductManufactured',\n    'MedicinalProductPackaged',\n    'MedicinalProductPharmaceutical',\n    'MedicinalProductUndesirableEffect',\n    'MessageDefinition',\n    'MessageHeader',\n    'MolecularSequence',\n    'NamingSystem',\n    'NutritionOrder',\n    'Observation',\n    'ObservationDefinition',\n    'OperationDefinition',\n    'OperationOutcome',\n    'Organization',\n    'OrganizationAffiliation',\n    'Parameters',\n    'Patient',\n    'PaymentNotice',\n    'PaymentReconciliation',\n    'Person',\n    'PlanDefinition',\n    'Practitioner',\n    'PractitionerRole',\n    'Procedure',\n    'Provenance',\n    'Questionnaire',\n    'QuestionnaireResponse',\n    'RelatedPerson',\n    'RequestGroup',\n    'ResearchDefinition',\n    'ResearchElementDefinition',\n    'ResearchStudy',\n    'ResearchSubject',\n    'RiskAssessment',\n    'RiskEvidenceSynthesis',\n    'Schedule',\n    'SearchParameter',\n    'ServiceRequest',\n    'Slot',\n    'Specimen',\n    'SpecimenDefinition',\n    'StructureDefinition',\n    'StructureMap',\n    'Subscription',\n    'Substance',\n    'SubstancePolymer',\n    'SubstanceProtein',\n    'SubstanceReferenceInformation',\n    'SubstanceSpecification',\n    'SubstanceSourceMaterial',\n    'SupplyDelivery',\n    'SupplyRequest',\n    'Task',\n    'TerminologyCapabilities',\n    'TestReport',\n    'TestScript',\n    'ValueSet',\n    'VerificationResult',\n    'VisionPrescription'\n  ) -%}\n    {%- do exceptions.raise_compiler_error(\n      \"Macro input error:\\n\"\n      \"  fhir_resource argument must be a valid FHIR resource in Pascal Case (e.g AllergyIntolerance).\\n\"\n      \"  Got: \" ~ fhir_resource ~ \"\\n\"\n      \"  See https://hl7.org/fhir/R4/resourcelist.html\"\n    ) -%}\n  {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Raises compiler error exception if fhir_resourse argument is not a valid FHIR resource written\nin Pascal Case (e.g. AllergyIntolerance). See list of FHIR resources:\nhttps://build.fhir.org/resourcelist.html.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "FHIR resource name to check."}], "created_at": 1700054013.8900998, "supported_languages": null}, "macro.fhir_dbt_utils.get_fhir_resource": {"name": "get_fhir_resource", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/get_fhir_resource.sql", "original_file_path": "macros/infrastructure_macros/get_fhir_resource.sql", "unique_id": "macro.fhir_dbt_utils.get_fhir_resource", "macro_sql": "{% macro get_fhir_resource(fhir_resource=None) %}\n\n{#- Validate input arguments -#}\n\n  {%- if fhir_resource != None and fhir_resource is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: fhir_resource argument must be a string. Got: \" ~ fhir_resource) -%}\n  {%- endif -%}\n\n  {%- if fhir_resource != None -%}\n  {%- do fhir_dbt_utils.validate_fhir_resource_name(fhir_resource) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {#- 1st choice: fhir_resource argument provided to macro -#}\n  {%- if fhir_resource != None -%}\n    {%- set fhir_resource = fhir_resource -%}\n  {%- endif -%}\n\n  {#- 2nd choice: fhir_resource specified by fhir_resource key in model metadata -#}\n  {%- if fhir_resource == None -%}\n    {%- set fhir_resource = fhir_dbt_utils.model_metadata(meta_key='fhir_resource') -%}\n  {%- endif -%}\n\n  {#- 3rd choice: fhir_resource specified by primary_resource key in model metadata -#}\n  {%- if fhir_resource == None -%}\n    {%- set fhir_resource = fhir_dbt_utils.model_metadata(meta_key='primary_resource') -%}\n  {%- endif -%}\n\n  {#- If no FHIR resource retrieved then raise error -#}\n  {%- if fhir_resource == None -%}\n      {{ exceptions.raise_compiler_error(\"fhir_resource argument not provided and not found in model metadata\") }}\n  {%- endif -%}\n\n  {%- do return(fhir_resource) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.validate_fhir_resource_name", "macro.fhir_dbt_utils.model_metadata"]}, "description": "Returns a FHIR resource name in the following priority order:\n\n(1) The `fhir_resource` argument provided to this macro, if specified.\n\n(2) The `fhir_resource` recorded in the model metadata config, if specified.\n\n(3) The `primary_resource` recorded in the model metadata config, if specified.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "FHIR resource name to be returned by this macro if specified. For example, \"Patient\".\n"}], "created_at": 1700054013.8847437, "supported_languages": null}, "macro.fhir_dbt_utils.get_dbt_objects": {"name": "get_dbt_objects", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/get_dbt_objects.sql", "original_file_path": "macros/infrastructure_macros/get_dbt_objects.sql", "unique_id": "macro.fhir_dbt_utils.get_dbt_objects", "macro_sql": "{% macro get_dbt_objects(resource_type=None) -%}\n\n{#- Validate input arguments -#}\n\n  {%- if resource_type != None and resource_type not in (\n    'macro',\n    'model',\n    'seed'\n  ) -%}\n    {%- do exceptions.raise_compiler_error(\n      \"Macro input error:\\n\"\n      \"  resource_type argument must one of: macro, model, seed.\\n\"\n      \"  Got: \" ~ resource_type\n    ) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {%- set models_dict = {} -%}\n  {% if execute %}\n    {% if resource_type != None %}\n      {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", resource_type) %}\n        {% do models_dict.update({node.name: node.path}) %}\n      {% endfor %}\n    {% else %}\n      {% for node in graph.nodes.values() %}\n        {% do models_dict.update({node.name: node.path}) %}\n      {% endfor %}\n    {% endif %}\n  {% endif %}\n  {% do return(models_dict) %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Returns a dictionary containing all objects in the dbt project as documented in the dbt graph.\nThe dictionary keys are the object names (e.g \"metric\") and the values are the paths for the\nobject in the project (e.g. \"post_processing/metric.sql\")\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "resource_type", "type": "string", "description": "Filter the dbt objects returned in the dictionary to a specific type (e.g. \"model\",\n\"macro\", \"seed\").\n\nIf not specified, the macro will return all object types.\n"}], "created_at": 1700054013.8840516, "supported_languages": null}, "macro.fhir_dbt_utils.get_snapshot_date": {"name": "get_snapshot_date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/infrastructure_macros/get_snapshot_date.sql", "original_file_path": "macros/infrastructure_macros/get_snapshot_date.sql", "unique_id": "macro.fhir_dbt_utils.get_snapshot_date", "macro_sql": "{% macro get_snapshot_date(snapshot_date=None)-%}\n\n{#- Validate input arguments -#}\n\n  {%- if snapshot_date != None and snapshot_date is not string -%}\n    {%- do exceptions.raise_compiler_error(\"Macro input error: snapshot_date argument must be a string. Got: \" ~ snapshot_date) -%}\n  {%- endif -%}\n\n\n{#- Macro logic -#}\n\n  {#- 1st choice: snapshot_date argument provided in model -#}\n  {%- if snapshot_date != None -%}\n    {%- do return(\"DATE('\" ~ snapshot_date ~ \"')\") -%}\n\n  {#- 2nd choice: snapshot_date specified by project variable -#}\n  {%- elif var('snapshot_date') != \"None\" -%}\n    {%- do return(\"DATE('\" ~ var('snapshot_date') ~ \"')\") -%}\n\n  {#- 3rd choice: default to today's date -#}\n  {%- else -%}\n        {%- do return('CURRENT_DATE()') -%}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Prints SQL for returning a date in the following priority order:\n\n(1) The `snapshot_date` argument provided to this macro, if specified.\n\n(2) The `snapshot_date` project variable, if specified.\n\n(3) Today's date.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "snapshot_date", "type": "string", "description": "Date to be returned by this macro if specified."}], "created_at": 1700054013.8860662, "supported_languages": null}, "macro.fhir_dbt_utils.select_from_unnest": {"name": "select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/select_from_unnest.sql", "original_file_path": "macros/cross_db_macros/select_from_unnest.sql", "unique_id": "macro.fhir_dbt_utils.select_from_unnest", "macro_sql": "{% macro select_from_unnest(select, unnested, where=\"1=1\", order_by=\"1\") -%}\n  {{ return (adapter.dispatch('select_from_unnest', 'fhir_dbt_utils') (select, unnested, where, order_by)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__select_from_unnest"]}, "description": "Prints SQL which selects the first value from unnested arrays.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "select", "type": "string", "description": "The field to select."}, {"name": "unnested", "type": "number", "description": "The unnested arrays, perhaps a result of the `unnest` or `unnest_multiple` macros.\n"}, {"name": "where", "type": "string", "description": "The WHERE clause, can use the alias of the unnested array values.\n"}, {"name": "order_by", "type": "string", "description": "The ORDER BY clause, important because we select the first value.\n"}], "created_at": 1700054013.9149997, "supported_languages": null}, "macro.fhir_dbt_utils.default__select_from_unnest": {"name": "default__select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/select_from_unnest.sql", "original_file_path": "macros/cross_db_macros/select_from_unnest.sql", "unique_id": "macro.fhir_dbt_utils.default__select_from_unnest", "macro_sql": "{% macro default__select_from_unnest(select, unnested, where, order_by) -%}\nSELECT {{ select }} FROM {{ unnested }} WHERE {{ where }} ORDER BY {{ order_by }} LIMIT 1\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.97414, "supported_languages": null}, "macro.fhir_dbt_utils.spark__select_from_unnest": {"name": "spark__select_from_unnest", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/select_from_unnest.sql", "original_file_path": "macros/cross_db_macros/select_from_unnest.sql", "unique_id": "macro.fhir_dbt_utils.spark__select_from_unnest", "macro_sql": "{% macro spark__select_from_unnest(select, unnested, where, order_by) -%}\nSELECT ELEMENT_AT(COLLECT_LIST({{ select }}), 1) FROM (\n  SELECT * FROM ({{ unnested }})\n  WHERE {{ where }}\n  ORDER BY {{ order_by }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.9745557, "supported_languages": null}, "macro.fhir_dbt_utils.flatten_column": {"name": "flatten_column", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_utils.flatten_column", "macro_sql": "{% macro flatten_column(column) -%}\n  {{ return(adapter.dispatch('flatten_column', 'fhir_dbt_utils') (column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__flatten_column"]}, "description": "Parses the data type and returns a list of sub-columns as structs with `name` and `data_type`\nfields. Recursively finds all sub-columns in a nested data type.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "column", "type": "struct with `name` and `data_type` fields", "description": "Column definition, including a structured `data_type`."}], "created_at": 1700054013.9061146, "supported_languages": null}, "macro.fhir_dbt_utils.default__flatten_column": {"name": "default__flatten_column", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_utils.default__flatten_column", "macro_sql": "{% macro default__flatten_column(column) -%}\n  {{ return (column.flatten()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.9829972, "supported_languages": null}, "macro.fhir_dbt_utils.spark__flatten_column": {"name": "spark__flatten_column", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_utils.spark__flatten_column", "macro_sql": "{% macro spark__flatten_column(column) -%}\n  {% set EXPECT_DATA_TYPE = \"EXPECT_DATA_TYPE\" %}\n  {% set EXPECT_COLUMN_NAME = \"EXPECT_COLUMN_NAME\" %}\n  {% set EXPECT_COMMA_OR_GREATER_THAN = \"EXPECT_COMMA_OR_GREATER_THAN\" %}\n  {% set EXPECT_COLON = \"EXPECT_COLON\" %}\n\n  {% if not \"<\" in column.data_type %}\n    {{ return ([]) }}\n  {% endif %}\n\n  {% set tokens = fhir_dbt_utils._tokenize(column.data_type) %}\n  {% set vars = { \"state\": EXPECT_DATA_TYPE } %}\n  {% set path = [column.name + \".\"] %}\n  {% set flat_columns = [] %}\n\n  {% for token in tokens %}\n\n    {% if vars.state == EXPECT_COMMA_OR_GREATER_THAN %}\n      {% if token == \",\" %}\n          {{ vars.update({ \"state\": EXPECT_COLUMN_NAME }) }}\n      {% else %}\n          {{ path.pop() }}\n      {% endif %}\n\n    {% elif vars.state == EXPECT_COLUMN_NAME %}\n      {% if token in KEYWORDS %}\n        {{ exceptions.raise_compiler_error(\"Expected column name, not '\" ~ token ~ \"'\") }}\n      {% endif %}\n      {{ path.append(token + \".\") }}\n      {{ vars.update({ \"state\": EXPECT_COLON }) }}\n\n    {% elif vars.state == EXPECT_COLON %}\n      {% if token != \":\" %}\n        {{ exceptions.raise_compiler_error(\"Expected colon, not '\" ~ token ~ \"'\") }}\n      {%  endif %}\n      {{ vars.update({ \"state\": EXPECT_DATA_TYPE }) }}\n\n    {% elif vars.state == EXPECT_DATA_TYPE %}\n\n      {% if token == \"struct<\" %}\n        {% set data_type = \"STRUCT\" %}\n        {{ vars.update({ \"state\": EXPECT_COLUMN_NAME }) }}\n\n      {% elif token == \"array<\" %}\n        {% set data_type = \"ARRAY\" %}\n        # Append empty string so that it does not appear in column name\n        # but we have something to pop when the array definition ends.\n        {{ path.append(\"\") }}\n        {{ vars.update({ \"state\": EXPECT_DATA_TYPE }) }}\n\n      {% else %}\n        {% set data_type = token %}\n        {{ vars.update({ \"state\": EXPECT_COMMA_OR_GREATER_THAN }) }}\n      {% endif %}\n\n      {% set full_name = (\"\".join(path))[:-1] %}\n      {% if (flat_columns|length > 0\n          and flat_columns[-1][\"name\"] == full_name\n          and flat_columns[-1][\"data_type\"].startswith(\"ARRAY\")) %}\n        # Let's replace the data type for the array.\n        # TODO(b/295880845): For nested arrays, the data type will still have just one ARRAY.\n        {{ flat_columns.pop() }}\n        {% set data_type = \"ARRAY<\" + data_type + \">\" %}\n      {% endif %}\n\n      {{ flat_columns.append({\n          \"name\": full_name,\n          \"data_type\": data_type}) }}\n\n      {% if data_type == token %}\n        {{ path.pop() }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(flat_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils._tokenize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.9935853, "supported_languages": null}, "macro.fhir_dbt_utils._tokenize": {"name": "_tokenize", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/flatten_column.sql", "original_file_path": "macros/cross_db_macros/flatten_column.sql", "unique_id": "macro.fhir_dbt_utils._tokenize", "macro_sql": "{% macro _tokenize(dtype) %}\n  {% set KEYWORDS = [\n      \"struct<\",\n      \"array<\",\n      ',',\n      ':',\n      '>']\n  %}\n\n  {% set tokens = [] %}\n  # In order to keep variables in a `for` cycle, we need to put them in a dictionary.\n  {% set vars = { \"rest\": dtype } %}\n\n  {% for unused in range(0, dtype|length)\n     if vars.rest|length > 0 %}\n    {% set rest = vars.rest %}\n    {{ vars.update({ \"token\": rest[: fhir_dbt_utils.find_first_of(rest, \",:>\")] }) }}\n    {% for keyword in KEYWORDS %}\n      {% if rest.startswith(keyword) %}\n        {{ vars.update({ \"token\": keyword }) }}\n      {% endif %}\n    {% endfor %}\n    {{ tokens.append(vars.token) }}\n    {{ vars.update({ \"rest\": rest[vars.token|length:] }) }}\n  {% endfor %}\n\n  {{ return (tokens) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.find_first_of"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054011.9997516, "supported_languages": null}, "macro.fhir_dbt_utils.uuid": {"name": "uuid", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/uuid.sql", "original_file_path": "macros/cross_db_macros/uuid.sql", "unique_id": "macro.fhir_dbt_utils.uuid", "macro_sql": "{% macro uuid() -%}\n  {{ return(adapter.dispatch('uuid', 'fhir_dbt_utils') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.bigquery__uuid"]}, "description": "Returns the SQL for UUID.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.9241698, "supported_languages": null}, "macro.fhir_dbt_utils.default__uuid": {"name": "default__uuid", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/uuid.sql", "original_file_path": "macros/cross_db_macros/uuid.sql", "unique_id": "macro.fhir_dbt_utils.default__uuid", "macro_sql": "{% macro default__uuid() -%}\n  UUID()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0017378, "supported_languages": null}, "macro.fhir_dbt_utils.bigquery__uuid": {"name": "bigquery__uuid", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/uuid.sql", "original_file_path": "macros/cross_db_macros/uuid.sql", "unique_id": "macro.fhir_dbt_utils.bigquery__uuid", "macro_sql": "{% macro bigquery__uuid() -%}\n  GENERATE_UUID()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.002092, "supported_languages": null}, "macro.fhir_dbt_utils.spark_parenthesis": {"name": "spark_parenthesis", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/spark_parenthesis.sql", "original_file_path": "macros/cross_db_macros/spark_parenthesis.sql", "unique_id": "macro.fhir_dbt_utils.spark_parenthesis", "macro_sql": "{% macro spark_parenthesis(s) -%}\n  {{ return (adapter.dispatch('spark_parenthesis', 'fhir_dbt_utils') (s)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__spark_parenthesis"]}, "description": "Surrounds `s` by parenthesis on Spark, leaves as is on BigQuery.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "s", "type": "string", "description": ""}], "created_at": 1700054013.9163947, "supported_languages": null}, "macro.fhir_dbt_utils.default__spark_parenthesis": {"name": "default__spark_parenthesis", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/spark_parenthesis.sql", "original_file_path": "macros/cross_db_macros/spark_parenthesis.sql", "unique_id": "macro.fhir_dbt_utils.default__spark_parenthesis", "macro_sql": "{% macro default__spark_parenthesis(s) -%}\n  {{ s }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0041409, "supported_languages": null}, "macro.fhir_dbt_utils.spark__spark_parenthesis": {"name": "spark__spark_parenthesis", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/spark_parenthesis.sql", "original_file_path": "macros/cross_db_macros/spark_parenthesis.sql", "unique_id": "macro.fhir_dbt_utils.spark__spark_parenthesis", "macro_sql": "{% macro spark__spark_parenthesis(s) -%}\n  ({{ s }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0046341, "supported_languages": null}, "macro.fhir_dbt_utils.unnest_multiple": {"name": "unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_utils.unnest_multiple", "macro_sql": "{% macro unnest_multiple(arrays) -%}\n  {{ return (adapter.dispatch('unnest_multiple', 'fhir_dbt_utils') (arrays)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__unnest_multiple"]}, "description": "Prints SQL which unnests a nested array.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "arrays", "type": "list", "description": "Configurations of the arrays to be unnested, each ideally created using the `array_config`\nmacro.\n"}], "created_at": 1700054013.9235826, "supported_languages": null}, "macro.fhir_dbt_utils.array_config": {"name": "array_config", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_utils.array_config", "macro_sql": "{% macro array_config(field, unnested_alias = 'unused') %}\n  {{ return ({ \"field\": field, \"unnested_alias\": unnested_alias}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0064044, "supported_languages": null}, "macro.fhir_dbt_utils.default__unnest_multiple": {"name": "default__unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_utils.default__unnest_multiple", "macro_sql": "{% macro default__unnest_multiple(arrays) -%}\n  {% for array in arrays -%}\n    UNNEST({{ array.field }}) {{ array.unnested_alias }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0077116, "supported_languages": null}, "macro.fhir_dbt_utils.spark__unnest_multiple": {"name": "spark__unnest_multiple", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/unnest_multiple.sql", "original_file_path": "macros/cross_db_macros/unnest_multiple.sql", "unique_id": "macro.fhir_dbt_utils.spark__unnest_multiple", "macro_sql": "{% macro spark__unnest_multiple(arrays) -%}\n  {# Select the field as `ac`: this \"cheeky select\" trick allows us to write the unnest as one\n      statement. #}\n  {%- set array0 = arrays[0] -%}\n    SELECT * FROM (SELECT EXPLODE(ac) AS {{ array0.unnested_alias }} FROM (SELECT {{ array0.field }} AS ac))\n  {%- for array in arrays[1:] %}\n    LATERAL VIEW OUTER explode ({{ array.field }}) AS {{ array.unnested_alias }}\n  {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.008469, "supported_languages": null}, "macro.fhir_dbt_utils.date_add_days": {"name": "date_add_days", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/date_add_days.sql", "original_file_path": "macros/cross_db_macros/date_add_days.sql", "unique_id": "macro.fhir_dbt_utils.date_add_days", "macro_sql": "{% macro date_add_days(expression, days) -%}\n  {{ return(adapter.dispatch('date_add_days', 'fhir_dbt_utils') (expression, days)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__date_add_days"]}, "description": "Prints SQL for adding a specified number of `days` to `expression`", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "expression", "type": null, "description": ""}, {"name": "days", "type": null, "description": ""}], "created_at": 1700054013.9038227, "supported_languages": null}, "macro.fhir_dbt_utils.default__date_add_days": {"name": "default__date_add_days", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/date_add_days.sql", "original_file_path": "macros/cross_db_macros/date_add_days.sql", "unique_id": "macro.fhir_dbt_utils.default__date_add_days", "macro_sql": "{% macro default__date_add_days(expression, days) -%}\n  DATE_ADD({{ expression }}, INTERVAL {{ days }} DAY)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.009532, "supported_languages": null}, "macro.fhir_dbt_utils.spark__date_add_days": {"name": "spark__date_add_days", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/date_add_days.sql", "original_file_path": "macros/cross_db_macros/date_add_days.sql", "unique_id": "macro.fhir_dbt_utils.spark__date_add_days", "macro_sql": "{% macro spark__date_add_days(expression, days) -%}\n  DATE_ADD({{ expression }}, {{ days }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0098162, "supported_languages": null}, "macro.fhir_dbt_utils.error": {"name": "error", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/error.sql", "original_file_path": "macros/cross_db_macros/error.sql", "unique_id": "macro.fhir_dbt_utils.error", "macro_sql": "{% macro error(expression) -%}\n  {{ return(adapter.dispatch('error', 'fhir_dbt_utils') (expression)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__error"]}, "description": "Prints the SQL to fail the query with an error.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "expression", "type": "string", "description": "Error message."}], "created_at": 1700054013.9045007, "supported_languages": null}, "macro.fhir_dbt_utils.default__error": {"name": "default__error", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/error.sql", "original_file_path": "macros/cross_db_macros/error.sql", "unique_id": "macro.fhir_dbt_utils.default__error", "macro_sql": "{% macro default__error(expression) -%}\n  ERROR(\"{{ expression }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0106888, "supported_languages": null}, "macro.fhir_dbt_utils.spark__error": {"name": "spark__error", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/error.sql", "original_file_path": "macros/cross_db_macros/error.sql", "unique_id": "macro.fhir_dbt_utils.spark__error", "macro_sql": "{% macro spark__error(expression) -%}\n  raise_error(\"{{ expression }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0109127, "supported_languages": null}, "macro.fhir_dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/safe_divide.sql", "original_file_path": "macros/cross_db_macros/safe_divide.sql", "unique_id": "macro.fhir_dbt_utils.safe_divide", "macro_sql": "\n\n{%- macro safe_divide(x, y) -%}\nIF(({{ y }}) != 0, ({{ x }}) / ({{ y }}), NULL)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Prints SQL to safely divide (i.e. return NULL if dividing by zero).", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "x", "type": "string", "description": "The numerator."}, {"name": "y", "type": "string", "description": "The denominator."}], "created_at": 1700054013.9101365, "supported_languages": null}, "macro.fhir_dbt_utils.type_double": {"name": "type_double", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/type_double.sql", "original_file_path": "macros/cross_db_macros/type_double.sql", "unique_id": "macro.fhir_dbt_utils.type_double", "macro_sql": "{% macro type_double() -%}\n  {{ return(adapter.dispatch('type_double', 'fhir_dbt_utils') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.bigquery__type_double"]}, "description": "Database specific type name for 64-bit rational number.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.920635, "supported_languages": null}, "macro.fhir_dbt_utils.default__type_double": {"name": "default__type_double", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/type_double.sql", "original_file_path": "macros/cross_db_macros/type_double.sql", "unique_id": "macro.fhir_dbt_utils.default__type_double", "macro_sql": "{% macro default__type_double() -%}\n  DOUBLE\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0122995, "supported_languages": null}, "macro.fhir_dbt_utils.bigquery__type_double": {"name": "bigquery__type_double", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/type_double.sql", "original_file_path": "macros/cross_db_macros/type_double.sql", "unique_id": "macro.fhir_dbt_utils.bigquery__type_double", "macro_sql": "{% macro bigquery__type_double() -%}\n  FLOAT64\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0124967, "supported_languages": null}, "macro.fhir_dbt_utils.type_long": {"name": "type_long", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/type_long.sql", "original_file_path": "macros/cross_db_macros/type_long.sql", "unique_id": "macro.fhir_dbt_utils.type_long", "macro_sql": "{% macro type_long() -%}\n  {{ return(adapter.dispatch('type_long', 'fhir_dbt_utils') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.bigquery__type_long"]}, "description": "Database specific type name for 64-bit integer.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.9211888, "supported_languages": null}, "macro.fhir_dbt_utils.default__type_long": {"name": "default__type_long", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/type_long.sql", "original_file_path": "macros/cross_db_macros/type_long.sql", "unique_id": "macro.fhir_dbt_utils.default__type_long", "macro_sql": "{% macro default__type_long() -%}\n  LONG\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0132508, "supported_languages": null}, "macro.fhir_dbt_utils.bigquery__type_long": {"name": "bigquery__type_long", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/type_long.sql", "original_file_path": "macros/cross_db_macros/type_long.sql", "unique_id": "macro.fhir_dbt_utils.bigquery__type_long", "macro_sql": "{% macro bigquery__type_long() -%}\n  INT64\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0134492, "supported_languages": null}, "macro.fhir_dbt_utils.date": {"name": "date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/date.sql", "original_file_path": "macros/cross_db_macros/date.sql", "unique_id": "macro.fhir_dbt_utils.date", "macro_sql": "{% macro date(expression, timezone=None) -%}\n  {{ return(adapter.dispatch('date', 'fhir_dbt_utils') (expression, timezone)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__date"]}, "description": "Prints SQL for converting `expression` to a date", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "expression", "type": "string", "description": "SQL expression to be converted to a date."}, {"name": "timezone", "type": "string", "description": "IANA time-zone name. For example, \"Europe/London\"."}], "created_at": 1700054013.902662, "supported_languages": null}, "macro.fhir_dbt_utils.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/date.sql", "original_file_path": "macros/cross_db_macros/date.sql", "unique_id": "macro.fhir_dbt_utils.default__date", "macro_sql": "{% macro default__date(expression, timezone) -%}\n  DATE({{ expression }}, {{ timezone }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0144734, "supported_languages": null}, "macro.fhir_dbt_utils.spark__date": {"name": "spark__date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/date.sql", "original_file_path": "macros/cross_db_macros/date.sql", "unique_id": "macro.fhir_dbt_utils.spark__date", "macro_sql": "{% macro spark__date(expression, timezone) -%}\n  DATE({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0147328, "supported_languages": null}, "macro.fhir_dbt_utils.timestamp_trunc": {"name": "timestamp_trunc", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/timestamp_trunc.sql", "original_file_path": "macros/cross_db_macros/timestamp_trunc.sql", "unique_id": "macro.fhir_dbt_utils.timestamp_trunc", "macro_sql": "{% macro timestamp_trunc(datepart, date, timezone=None) -%}\n  {{ return(adapter.dispatch('timestamp_trunc', 'fhir_dbt_utils') (datepart, date, timezone)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.bigquery__timestamp_trunc"]}, "description": "Re-implement dbt.date_trunc for BigQuery, in order to allow entering timezone.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "datepart", "type": "string", "description": "E.g. \"hour\"."}, {"name": "date", "type": "string", "description": "The date expression."}, {"name": "timezone", "type": "string", "description": "The timezone."}], "created_at": 1700054013.9198406, "supported_languages": null}, "macro.fhir_dbt_utils.bigquery__timestamp_trunc": {"name": "bigquery__timestamp_trunc", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/timestamp_trunc.sql", "original_file_path": "macros/cross_db_macros/timestamp_trunc.sql", "unique_id": "macro.fhir_dbt_utils.bigquery__timestamp_trunc", "macro_sql": "{% macro bigquery__timestamp_trunc(datepart, date, timezone) -%}\n  TIMESTAMP_TRUNC({{ date }}, {{ datepart }}, {{ timezone }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0164227, "supported_languages": null}, "macro.fhir_dbt_utils.default__timestamp_trunc": {"name": "default__timestamp_trunc", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/timestamp_trunc.sql", "original_file_path": "macros/cross_db_macros/timestamp_trunc.sql", "unique_id": "macro.fhir_dbt_utils.default__timestamp_trunc", "macro_sql": "{% macro default__timestamp_trunc(datepart, date, timezone) -%}\n  {{ dbt.date_trunc(datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0170019, "supported_languages": null}, "macro.fhir_dbt_utils.current_datetime": {"name": "current_datetime", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/current_datetime.sql", "original_file_path": "macros/cross_db_macros/current_datetime.sql", "unique_id": "macro.fhir_dbt_utils.current_datetime", "macro_sql": "{% macro current_datetime() -%}\n  {{ return(adapter.dispatch('current_datetime', 'fhir_dbt_utils') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__current_datetime"]}, "description": "Prints SQL for returning the current date and time.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.9014704, "supported_languages": null}, "macro.fhir_dbt_utils.default__current_datetime": {"name": "default__current_datetime", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/current_datetime.sql", "original_file_path": "macros/cross_db_macros/current_datetime.sql", "unique_id": "macro.fhir_dbt_utils.default__current_datetime", "macro_sql": "{% macro default__current_datetime() -%}\n  CURRENT_DATETIME()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.018453, "supported_languages": null}, "macro.fhir_dbt_utils.spark__current_datetime": {"name": "spark__current_datetime", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/current_datetime.sql", "original_file_path": "macros/cross_db_macros/current_datetime.sql", "unique_id": "macro.fhir_dbt_utils.spark__current_datetime", "macro_sql": "{% macro spark__current_datetime() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0189576, "supported_languages": null}, "macro.fhir_dbt_utils.unnest": {"name": "unnest", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/unnest.sql", "original_file_path": "macros/cross_db_macros/unnest.sql", "unique_id": "macro.fhir_dbt_utils.unnest", "macro_sql": "{% macro unnest(array, alias = \"\") -%}\n  {{ return (adapter.dispatch('unnest', 'fhir_dbt_utils') (array, alias)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__unnest"]}, "description": "Prints SQL which unnests an array.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "array", "type": "string", "description": "The array to unnest."}, {"name": "alias", "type": "string", "description": "The alias for the unnested values."}], "created_at": 1700054013.922348, "supported_languages": null}, "macro.fhir_dbt_utils.default__unnest": {"name": "default__unnest", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/unnest.sql", "original_file_path": "macros/cross_db_macros/unnest.sql", "unique_id": "macro.fhir_dbt_utils.default__unnest", "macro_sql": "{% macro default__unnest(array, alias) -%}\n  UNNEST({{ array }}){% if alias|length > 0 %} {{ alias }}{% endif %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.020437, "supported_languages": null}, "macro.fhir_dbt_utils.spark__unnest": {"name": "spark__unnest", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/unnest.sql", "original_file_path": "macros/cross_db_macros/unnest.sql", "unique_id": "macro.fhir_dbt_utils.spark__unnest", "macro_sql": "{% macro spark__unnest(array, alias) -%}\n  SELECT EXPLODE(ac){% if alias|length > 0 %} AS {{ alias }}{% endif %} FROM (SELECT {{ array }} AS ac)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0208776, "supported_languages": null}, "macro.fhir_dbt_utils.table_ref": {"name": "table_ref", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/table_ref.sql", "original_file_path": "macros/cross_db_macros/table_ref.sql", "unique_id": "macro.fhir_dbt_utils.table_ref", "macro_sql": "{% macro table_ref(database, schema, table) -%}\n  {{ return(adapter.dispatch('table_ref', 'fhir_dbt_utils') (database, schema, table)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__table_ref"]}, "description": "Constructs a table reference. Useful when the `ref` macro can't be used.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "database", "type": null, "description": ""}, {"name": "schema", "type": null, "description": ""}, {"name": "table", "type": null, "description": ""}], "created_at": 1700054013.9183147, "supported_languages": null}, "macro.fhir_dbt_utils.default__table_ref": {"name": "default__table_ref", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/table_ref.sql", "original_file_path": "macros/cross_db_macros/table_ref.sql", "unique_id": "macro.fhir_dbt_utils.default__table_ref", "macro_sql": "{% macro default__table_ref(database, schema, table) -%}\n  {{ return(\"`\"~database~\"`.`\"~schema~\"`.`\"~table~\"`\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.022097, "supported_languages": null}, "macro.fhir_dbt_utils.spark__table_ref": {"name": "spark__table_ref", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/table_ref.sql", "original_file_path": "macros/cross_db_macros/table_ref.sql", "unique_id": "macro.fhir_dbt_utils.spark__table_ref", "macro_sql": "{% macro spark__table_ref(database, schema, table) -%}\n  {{ return(schema~\".\"~table) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0224411, "supported_languages": null}, "macro.fhir_dbt_utils.array_join": {"name": "array_join", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/array_join.sql", "original_file_path": "macros/cross_db_macros/array_join.sql", "unique_id": "macro.fhir_dbt_utils.array_join", "macro_sql": "{% macro array_join(array, delimiter) -%}\n  {{ return(adapter.dispatch('array_join', 'fhir_dbt_utils') (array, delimiter)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__array_join"]}, "description": "Prints SQL for creating a string by joining the `array` values by the `delimiter`.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "array", "type": null, "description": ""}, {"name": "delimiter", "type": null, "description": ""}], "created_at": 1700054013.9008994, "supported_languages": null}, "macro.fhir_dbt_utils.default__array_join": {"name": "default__array_join", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/array_join.sql", "original_file_path": "macros/cross_db_macros/array_join.sql", "unique_id": "macro.fhir_dbt_utils.default__array_join", "macro_sql": "{% macro default__array_join(array, delimiter) -%}\n  ARRAY_TO_STRING({{ array }}, \"{{ delimiter }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0236194, "supported_languages": null}, "macro.fhir_dbt_utils.spark__array_join": {"name": "spark__array_join", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/array_join.sql", "original_file_path": "macros/cross_db_macros/array_join.sql", "unique_id": "macro.fhir_dbt_utils.spark__array_join", "macro_sql": "{% macro spark__array_join(array, delimiter) -%}\n  array_join({{ array }}, \"{{ delimiter }}\")\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0239193, "supported_languages": null}, "macro.fhir_dbt_utils.safe_cast_as_timestamp": {"name": "safe_cast_as_timestamp", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/safe_cast_as_timestamp.sql", "original_file_path": "macros/cross_db_macros/safe_cast_as_timestamp.sql", "unique_id": "macro.fhir_dbt_utils.safe_cast_as_timestamp", "macro_sql": "\n\n{%- macro safe_cast_as_timestamp(x) -%}\n    {{ dbt.safe_cast(x, api.Column.translate_type(\"timestamp\")) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.safe_cast"]}, "description": "Convenience function to safe_cast as timestamp.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "x", "type": "string", "description": "Expression to be cast as timestamp."}], "created_at": 1700054013.908297, "supported_languages": null}, "macro.fhir_dbt_utils.safe_cast_as_date": {"name": "safe_cast_as_date", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/safe_cast_as_date.sql", "original_file_path": "macros/cross_db_macros/safe_cast_as_date.sql", "unique_id": "macro.fhir_dbt_utils.safe_cast_as_date", "macro_sql": "\n\n{%- macro safe_cast_as_date(x) -%}\n    {{ dbt.safe_cast(x, api.Column.translate_type(\"date\")) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.safe_cast"]}, "description": "Convenience function to safe_cast as date.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "x", "type": "string", "description": "Expression to be cast as date."}], "created_at": 1700054013.9074664, "supported_languages": null}, "macro.fhir_dbt_utils.safe_offset": {"name": "safe_offset", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/safe_offset.sql", "original_file_path": "macros/cross_db_macros/safe_offset.sql", "unique_id": "macro.fhir_dbt_utils.safe_offset", "macro_sql": "{% macro safe_offset(array, index) -%}\n  {{ return(adapter.dispatch('safe_offset', 'fhir_dbt_utils') (array, index)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__safe_offset"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0258257, "supported_languages": null}, "macro.fhir_dbt_utils.default__safe_offset": {"name": "default__safe_offset", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/safe_offset.sql", "original_file_path": "macros/cross_db_macros/safe_offset.sql", "unique_id": "macro.fhir_dbt_utils.default__safe_offset", "macro_sql": "{% macro default__safe_offset(array, index) -%}\n  {{ array }}[SAFE_OFFSET({{ index }})]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0261312, "supported_languages": null}, "macro.fhir_dbt_utils.spark__safe_offset": {"name": "spark__safe_offset", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/safe_offset.sql", "original_file_path": "macros/cross_db_macros/safe_offset.sql", "unique_id": "macro.fhir_dbt_utils.spark__safe_offset", "macro_sql": "{% macro spark__safe_offset(array, index) -%}\n  element_at({{ array }}, {{ index + 1 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0264497, "supported_languages": null}, "macro.fhir_dbt_utils.is_spark": {"name": "is_spark", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/is_spark.sql", "original_file_path": "macros/cross_db_macros/is_spark.sql", "unique_id": "macro.fhir_dbt_utils.is_spark", "macro_sql": "{% macro is_spark() -%}\n  {{ return(adapter.dispatch('is_spark', 'fhir_dbt_utils') ()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.default__is_spark"]}, "description": "Returns `true` if the target database is Apache Spark SQL.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.9066992, "supported_languages": null}, "macro.fhir_dbt_utils.default__is_spark": {"name": "default__is_spark", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/is_spark.sql", "original_file_path": "macros/cross_db_macros/is_spark.sql", "unique_id": "macro.fhir_dbt_utils.default__is_spark", "macro_sql": "{% macro default__is_spark() -%}\n  {{ return (False) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0273778, "supported_languages": null}, "macro.fhir_dbt_utils.spark__is_spark": {"name": "spark__is_spark", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/cross_db_macros/is_spark.sql", "original_file_path": "macros/cross_db_macros/is_spark.sql", "unique_id": "macro.fhir_dbt_utils.spark__is_spark", "macro_sql": "{% macro spark__is_spark() -%}\n  {{ return (True) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0278661, "supported_languages": null}, "macro.fhir_dbt_utils.raw_tables_to_relations": {"name": "raw_tables_to_relations", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_view_macros/raw_tables_to_relations.sql", "original_file_path": "macros/fhir_view_macros/raw_tables_to_relations.sql", "unique_id": "macro.fhir_dbt_utils.raw_tables_to_relations", "macro_sql": "{% macro raw_tables_to_relations(input_tables) %}\n\n    {# Initialise array #}\n    {% set relationArray = [] %}\n\n    {# Append relations based on raw config and table names #}\n    {% for input_table in input_tables %}\n        {{ relationArray.append(api.Relation.create(\n               database=var('database'), schema=var('schema'), identifier=input_table)) }}\n    {% endfor %}\n\n    {{ return(relationArray) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns an array of [dbt relations](https://docs.getdbt.com/reference/dbt-classes#relation)\nfor a list of table names.\n\nThe macro will search for the existence of the tables within the source schema defined by the\n`database` and `schema` variables in dbt_project.yml.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "input_tables", "type": "list", "description": "List of table names\n"}], "created_at": 1700054013.8930032, "supported_languages": null}, "macro.fhir_dbt_utils.fhir_resource_exists": {"name": "fhir_resource_exists", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_view_macros/fhir_resource_exists.sql", "original_file_path": "macros/fhir_view_macros/fhir_resource_exists.sql", "unique_id": "macro.fhir_dbt_utils.fhir_resource_exists", "macro_sql": "\n\n{%- macro fhir_resource_exists(test_fhir_resource) -%}\n\n    {%- if var('assume_resources_exist') -%}\n        {{ return (True) }}\n    {%- endif -%}\n\n  {# Query all available FHIR resources #}\n  {% set resource_list =\n      dbt_utils.get_column_values(table=ref('fhir_table_list'), column='fhir_resource') %}\n\n  {# Check for resource of interest #}\n  {% for resource in resource_list %}\n     {% if resource == test_fhir_resource %}\n        {{ return(True) }}\n     {% endif %}\n  {% endfor %}\n\n  {{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_column_values"]}, "description": "Returns TRUE if a specified FHIR resource exists within the source schema defined by the\n`database` and `schema` variables in dbt_project.yml.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "test_fhir_resource", "type": "string", "description": "FHIR resource to evaluate in Pascal case (e.g AllergyIntolerance)."}], "created_at": 1700054013.8782933, "supported_languages": null}, "macro.fhir_dbt_utils.create_dummy_table": {"name": "create_dummy_table", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_view_macros/create_dummy_table.sql", "original_file_path": "macros/fhir_view_macros/create_dummy_table.sql", "unique_id": "macro.fhir_dbt_utils.create_dummy_table", "macro_sql": "\n\n{%- macro create_dummy_table() -%}\n\n{%- if execute -%}\n{%- set patient_reference_column = fhir_dbt_utils.model_metadata('patient_reference_column') -%}\n{%- endif -%}\n\nSELECT\n  CAST(NULL AS STRING) AS id,\n{%- if patient_reference_column == \"link[].target\" %}\n  {{ dbt.array_construct([\"STRUCT(STRUCT('no_data' AS patientId) AS target)\"]) }} AS link,\n{%- elif patient_reference_column != None %}\n  STRUCT('no_data' AS patientId) AS {{patient_reference_column}},\n{%- endif %}\n  CAST(NULL AS STRING) AS fhir_mapping,\n  CAST(NULL AS DATE) AS metric_date,\n  CAST(NULL AS TIMESTAMP) AS metric_hour\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.model_metadata", "macro.dbt.array_construct"]}, "description": "Prints a SQL select statement to create a single row table with an id field and a patient\nreference field.\n\nThis macro is called by the `fhir_resource_view_expression` macro to create a \"dummy\" view\nwhen no table exists for a FHIR resource. \n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.8765292, "supported_languages": null}, "macro.fhir_dbt_utils.fhir_resource_view_expression": {"name": "fhir_resource_view_expression", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_view_macros/fhir_resource_view_expression.sql", "original_file_path": "macros/fhir_view_macros/fhir_resource_view_expression.sql", "unique_id": "macro.fhir_dbt_utils.fhir_resource_view_expression", "macro_sql": "\n\n{%- macro fhir_resource_view_expression() -%}\n\n{%- if execute -%}\n\n    {%- set fhir_resource = fhir_dbt_utils.model_metadata(meta_key='fhir_resource') -%}\n\n    {% if var('snake_case_fhir_tables') %}\n        {% set fhir_table = fhir_dbt_utils.camel_case_to_snake_case(fhir_resource) %}\n    {% else %}\n        {% set fhir_table = fhir_resource %}\n    {% endif %}\n\n{%- if target.name == \"internal_pipeline\"  -%}\n    {%- set metric_date_columns = fhir_dbt_utils.get_metric_date_columns() -%}\n    {%- set date_column_data_type = 'STRING' -%}\nSELECT\n    *,\n    {%- if fhir_resource not in ('Binary') %}\n    meta.mappingId AS fhir_mapping,\n    {%- else %}\n    NULL AS fhir_mapping,\n    {%- endif %}\n    {{ fhir_dbt_utils.metric_date(metric_date_columns, date_column_data_type) }} AS metric_date,\n    {{ fhir_dbt_utils.metric_hour(metric_date_columns, date_column_data_type) }} AS metric_hour\nFROM {{fhir_table}}\n{% elif not fhir_dbt_utils.fhir_resource_exists(fhir_resource) %}\n    {%- do exceptions.warn(\"FHIR resource \" ~ fhir_table ~ \" does not exist in your database. Creating a dummy view with 1 row\") -%}\n    {{ fhir_dbt_utils.create_dummy_table() }}\n{%- elif var('multiple_tables_per_resource') -%}\n    {% set fhir_tables = fhir_dbt_utils.get_tables_for_resource(fhir_resource) %}\n    {{ return(fhir_dbt_utils.build_union_query(fhir_tables)) }}\n{%- else %}\n    {%- set metric_date_columns = fhir_dbt_utils.get_metric_date_columns() -%}\n    {%- set datatype_dict = fhir_dbt_utils.get_datatype_dict(fhir_resource) -%}\n    {%- set date_column_data_type = datatype_dict[metric_date_columns[0]] %}\nSELECT\n    *,\n    CAST(NULL AS STRING) AS fhir_mapping,\n    {{ fhir_dbt_utils.metric_date(metric_date_columns, date_column_data_type) }} AS metric_date,\n    {{ fhir_dbt_utils.metric_hour(metric_date_columns, date_column_data_type) }} AS metric_hour\nFROM {{ source('fhir', fhir_table) }}\n{%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fhir_dbt_utils.model_metadata", "macro.fhir_dbt_utils.camel_case_to_snake_case", "macro.fhir_dbt_utils.get_metric_date_columns", "macro.fhir_dbt_utils.metric_date", "macro.fhir_dbt_utils.metric_hour", "macro.fhir_dbt_utils.fhir_resource_exists", "macro.fhir_dbt_utils.create_dummy_table", "macro.fhir_dbt_utils.get_tables_for_resource", "macro.fhir_dbt_utils.build_union_query", "macro.fhir_dbt_utils.get_datatype_dict"]}, "description": "Prints SQL for views over a FHIR resource.\nIt is used by models within the `fhir_resources` folder to generate FHIR resource views (e.g Patient.sql).", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [], "created_at": 1700054013.8789346, "supported_languages": null}, "macro.fhir_dbt_utils.build_union_query": {"name": "build_union_query", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_view_macros/build_union_query.sql", "original_file_path": "macros/fhir_view_macros/build_union_query.sql", "unique_id": "macro.fhir_dbt_utils.build_union_query", "macro_sql": "{% macro build_union_query(fhir_tables) %}\n\n{%- set relations = fhir_dbt_utils.raw_tables_to_relations(fhir_tables) %}\n{%- set relation_columns = {} -%}\n{%- set column_superset = {} -%}\n{%- set column_data_type_clash = [] -%}\n{%- set metric_date_columns = fhir_dbt_utils.get_metric_date_columns() -%}\n\n{#- Iterate through tables to produce superset of all columns -#}\n{%- for relation in relations -%}\n  {%- set columns = adapter.get_columns_in_relation(relation) -%}\n  {%- do relation_columns.update({relation: []}) -%}\n  {%- for col in columns -%}\n    {%- do relation_columns[relation].append(col.column) -%}\n      {% for sub_col in flatten_column(col) %}\n        {% do relation_columns[relation].append(sub_col.column) %}\n      {%- endfor -%}\n    {%- if col.column not in column_superset -%}\n      {%- do column_superset.update({col.column: col.data_type}) -%}\n    {%- else -%}\n      {%- set data_type_existing = column_superset[col.column] -%}\n      {%- if col.data_type != data_type_existing %}\n        {%- do column_data_type_clash.append(col.column) -%}\n      {%- endif -%}\n      {%- do column_superset.update({col.column: col.data_type}) -%}\n    {%- endif -%}\n  {%- endfor -%}\n{%- endfor -%}\n\n{#- Iterate through tables to create a select statement per table -#}\n{%- for relation in relations %}\n\n    {#- Filter list of metric date columns to only those that are mapped in table -#}\n    {%- if metric_date_columns != None %}\n      {%- for date_column in metric_date_columns %}\n        {%- do metric_date_columns.remove(date_column) if date_column not in relation_columns[relation] -%}\n      {%- endfor %}\n    {%- endif %}\n    {%- if metric_date_columns == [] %}\n      {%- set metric_date_columns = None %}\n    {%- endif %}\n\nSELECT\n  {#- Iterate through columns that exist in all tables for this FHIR resource -#}\n  {%- for column in column_superset %}\n    {%- if column in column_data_type_clash %}\n    'subfield_mismatch' AS {{ column }},\n    {%- else -%}\n    {%- set col_name = adapter.quote(column) if column in relation_columns[relation] else 'null' %}\n    {{ col_name }} AS {{ column }},\n    {%- endif -%}\n  {%- endfor -%}\n\n  {#- Add additional derived columns to the view #}\n    '{{ relation.identifier }}' AS fhir_mapping,\n    {{ fhir_dbt_utils.metric_date(metric_date_columns, column_superset[metric_date_columns]) }} AS metric_date,\n    {{ fhir_dbt_utils.metric_hour(metric_date_columns, column_superset[metric_date_columns]) }} AS metric_hour\n\nFROM {{ relation }}\n{%- if not loop.last %}\nUNION ALL\n{%- endif -%}\n{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fhir_dbt_utils.raw_tables_to_relations", "macro.fhir_dbt_utils.get_metric_date_columns", "macro.fhir_dbt_utils.flatten_column", "macro.fhir_dbt_utils.metric_date", "macro.fhir_dbt_utils.metric_hour"]}, "description": "Prints SQL for a unioned view of all input tables, returning the superset of columns from all\ntables.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "tables", "type": "list", "description": "Array of BigQuery table names.\n"}], "created_at": 1700054013.8803146, "supported_languages": null}, "macro.fhir_dbt_utils.get_tables_for_resource": {"name": "get_tables_for_resource", "resource_type": "macro", "package_name": "fhir_dbt_utils", "path": "macros/fhir_view_macros/get_tables_for_resource.sql", "original_file_path": "macros/fhir_view_macros/get_tables_for_resource.sql", "unique_id": "macro.fhir_dbt_utils.get_tables_for_resource", "macro_sql": "{% macro get_tables_for_resource(fhir_resource) %}\n\n    {# Build query to check for all tables of a certain FHIR resource #}\n    {%- call statement('result', fetch_result=True) -%}\n    SELECT DISTINCT bq_table\n    FROM {{ ref('fhir_table_list') }} AS L\n    WHERE fhir_resource = '{{ fhir_resource }}'\n    AND latest_version = 1\n    {%- endcall -%}\n\n    {# Return result, or dummy array of ['Observation'] if result is empty #}\n    {% if execute %}\n        {{ return(load_result('result').table.columns[0].values()) }}\n    {% else %}\n        {{ return(['Observation']) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "Returns an array of BigQuery table names for a FHIR resource by querying `fhir_table_list` and\nfiltering to the resource of interest. If no tables exist then a dummy array is returned.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "fhir_dbt_utils://macros/macros_config.yml", "arguments": [{"name": "fhir_resource", "type": "string", "description": "FHIR resource for which to return array of BigQuery table names (e.g. AllergyIntolerance).\n"}], "created_at": 1700054013.886772, "supported_languages": null}, "macro.dbt_unittest.assert_list_equals": {"name": "assert_list_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_list_equals.sql", "original_file_path": "macros/assert_list_equals.sql", "unique_id": "macro.dbt_unittest.assert_list_equals", "macro_sql": "{% macro assert_list_equals(value, expected) %}\n  {% if value is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not iterable.\") %}\n  {% endif %}\n  {% if expected is not iterable %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not iterable.\") %}\n  {% endif %}\n\n  {% set length_of_1st_arg = value | length %}\n  {% set length_of_2nd_arg = expected | length %}\n\n  {% if length_of_1st_arg != length_of_2nd_arg %}\n      {% do exceptions.raise_compiler_error(\"FAILED: lengths of the two are not equal.\") %}\n  {% endif %}\n\n  {% for i in range(length_of_1st_arg) %}\n    {% if value[i] != expected[i] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values at the index {{ i }} is not equal.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0549283, "supported_languages": null}, "macro.dbt_unittest.assert_false": {"name": "assert_false", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_false.sql", "original_file_path": "macros/assert_false.sql", "unique_id": "macro.dbt_unittest.assert_false", "macro_sql": "{% macro assert_false(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is false %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not false.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0562706, "supported_languages": null}, "macro.dbt_unittest.assert_in": {"name": "assert_in", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_in.sql", "original_file_path": "macros/assert_in.sql", "unique_id": "macro.dbt_unittest.assert_in", "macro_sql": "{% macro assert_in(value, expected) %}\n  {% if value in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0572104, "supported_languages": null}, "macro.dbt_unittest.assert_equals": {"name": "assert_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_equals.sql", "original_file_path": "macros/assert_equals.sql", "unique_id": "macro.dbt_unittest.assert_equals", "macro_sql": "{% macro assert_equals(value, expected) %}\n  {% if value == expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.058455, "supported_languages": null}, "macro.dbt_unittest.assert_is_none": {"name": "assert_is_none", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_is_none.sql", "original_file_path": "macros/assert_is_none.sql", "unique_id": "macro.dbt_unittest.assert_is_none", "macro_sql": "{% macro assert_is_none(value) %}\n  {% if value is none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not none.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0594442, "supported_languages": null}, "macro.dbt_unittest.assert_is_not_none": {"name": "assert_is_not_none", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_is_not_none.sql", "original_file_path": "macros/assert_is_not_none.sql", "unique_id": "macro.dbt_unittest.assert_is_not_none", "macro_sql": "{% macro assert_is_not_none(value) %}\n  {% if value is not none %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is none.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0608082, "supported_languages": null}, "macro.dbt_unittest.assert_dict_equals": {"name": "assert_dict_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_dict_equals.sql", "original_file_path": "macros/assert_dict_equals.sql", "unique_id": "macro.dbt_unittest.assert_dict_equals", "macro_sql": "{% macro assert_dict_equals(value, expected) %}\n  {% if value is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 1st argument \" ~ value ~ \" is not a mapping.\") %}\n  {% endif %}\n  {% if expected is not mapping %}\n    {% do exceptions.raise_compiler_error(\"FAILED: 2nd argument \" ~ expected ~ \" is not a mapping.\") %}\n  {% endif %}\n\n  {% for k, v in value.items() %}\n    {% if k not in expected %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 1st argument is not in \" ~ expected ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and expected[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != expected[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% for k, v in expected.items() %}\n    {% if k not in value %}\n      {% do exceptions.raise_compiler_error(\"FAILED: key \" ~ k ~ \" of 2nd argument is not in \" ~ value ~ \".\") %}\n    {% endif %}\n\n    {% if v is none and value[k] is not none %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n\n    {% if v != value[k] %}\n      {% do exceptions.raise_compiler_error(\"FAILED: values on the key \" ~ k ~ \" are not same.\") %}\n    {% endif %}\n  {% endfor %}\n\n  {% do log(\"SUCCESS\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0680292, "supported_languages": null}, "macro.dbt_unittest.assert_true": {"name": "assert_true", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_true.sql", "original_file_path": "macros/assert_true.sql", "unique_id": "macro.dbt_unittest.assert_true", "macro_sql": "{% macro assert_true(value) %}\n  {% if value is not boolean %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is not boolean.\") %}\n  {% endif %}\n\n  {% if value is true %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is not true.\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0693345, "supported_languages": null}, "macro.dbt_unittest.assert_not_in": {"name": "assert_not_in", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_not_in.sql", "original_file_path": "macros/assert_not_in.sql", "unique_id": "macro.dbt_unittest.assert_not_in", "macro_sql": "{% macro assert_not_in(value, expected) %}\n  {% if value not in expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: value \" ~ value ~ \" is in \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.070639, "supported_languages": null}, "macro.dbt_unittest.assert_not_equals": {"name": "assert_not_equals", "resource_type": "macro", "package_name": "dbt_unittest", "path": "macros/assert_not_equals.sql", "original_file_path": "macros/assert_not_equals.sql", "unique_id": "macro.dbt_unittest.assert_not_equals", "macro_sql": "{% macro assert_not_equals(value, expected) %}\n  {% if value != expected %}\n    {% do log(\"SUCCESS\") %}\n  {% else %}\n    {% do exceptions.raise_compiler_error(\"FAILED: \" ~ value ~ \" is equal to \" ~ expected ~ \".\") %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.071875, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0732388, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0749261, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0762796, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0780764, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.079824, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0815058, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0830376, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.084039, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0857341, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.087694, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0889895, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0899787, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.0974145, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.102568, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1043336, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1068702, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.108498, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.109221, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.112034, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.115588, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1165545, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.117289, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1185222, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1200366, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1214418, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1232939, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.12453, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.125383, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1269886, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1289284, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1308982, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1321983, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.133421, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1351075, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.135902, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1365736, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1374393, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.138728, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1394045, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1404622, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1417804, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1427057, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.143096, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1438782, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.144991, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1455863, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1461058, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.14732, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1492124, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.150422, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1527228, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.154052, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1544785, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1568742, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1602752, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1622336, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1628094, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1640115, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.165681, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1716454, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.178991, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.180021, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1812623, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.18348, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1865387, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.190645, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.193755, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1956415, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1967206, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1971462, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1982174, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.1992798, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2002094, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2024827, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.204412, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2049348, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2056794, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.206674, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2082694, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.210621, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2138662, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2156913, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2162137, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2167015, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2171884, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2208588, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.221601, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2230785, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.224205, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2256484, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2281682, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.228978, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2296798, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2306092, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2334776, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.235049, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2361894, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2381947, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2387857, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2393723, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2398112, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.240197, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2405803, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.241375, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2424834, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2430246, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.243489, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2444284, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2448468, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2453978, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2457447, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2467904, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.2493987, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1700054012.251736, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.fhir_dbt_utils.MedicationStatement": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.ImagingStudy": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.MedicationDispense": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.DiagnosticReport": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.DocumentReference": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Practitioner": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Patient": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Composition": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.ServiceRequest": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Procedure": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.fhir_table_list": [], "model.fhir_dbt_utils.PractitionerRole": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.EpisodeOfCare": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Condition": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.MedicationAdministration": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Binary": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.AllergyIntolerance": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Person": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Encounter": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Medication": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Observation": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Location": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.MedicationRequest": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.CareTeam": ["model.fhir_dbt_utils.fhir_table_list"], "model.fhir_dbt_utils.Organization": ["model.fhir_dbt_utils.fhir_table_list"], "analysis.fhir_dbt_utils.observation_processed": ["model.fhir_dbt_utils.Observation"], "analysis.fhir_dbt_utils.patient_processed": ["model.fhir_dbt_utils.Patient"], "analysis.fhir_dbt_utils.encounter_processed": ["model.fhir_dbt_utils.Encounter"], "source.fhir_dbt_utils.fhir.AllergyIntolerance": [], "source.fhir_dbt_utils.fhir.Binary": [], "source.fhir_dbt_utils.fhir.CarePlan": [], "source.fhir_dbt_utils.fhir.CareTeam": [], "source.fhir_dbt_utils.fhir.Claim": [], "source.fhir_dbt_utils.fhir.Composition": [], "source.fhir_dbt_utils.fhir.Condition": [], "source.fhir_dbt_utils.fhir.Device": [], "source.fhir_dbt_utils.fhir.DiagnosticReport": [], "source.fhir_dbt_utils.fhir.DocumentReference": [], "source.fhir_dbt_utils.fhir.Encounter": [], "source.fhir_dbt_utils.fhir.EpisodeOfCare": [], "source.fhir_dbt_utils.fhir.ExplanationOfBenefit": [], "source.fhir_dbt_utils.fhir.ImagingStudy": [], "source.fhir_dbt_utils.fhir.Immunization": [], "source.fhir_dbt_utils.fhir.Location": [], "source.fhir_dbt_utils.fhir.Medication": [], "source.fhir_dbt_utils.fhir.MedicationDispense": [], "source.fhir_dbt_utils.fhir.MedicationAdministration": [], "source.fhir_dbt_utils.fhir.MedicationRequest": [], "source.fhir_dbt_utils.fhir.Observation": [], "source.fhir_dbt_utils.fhir.Organization": [], "source.fhir_dbt_utils.fhir.Patient": [], "source.fhir_dbt_utils.fhir.Practitioner": [], "source.fhir_dbt_utils.fhir.PractitionerRole": [], "source.fhir_dbt_utils.fhir.Procedure": [], "source.fhir_dbt_utils.fhir.allergy_intolerance": [], "source.fhir_dbt_utils.fhir.binary": [], "source.fhir_dbt_utils.fhir.care_plan": [], "source.fhir_dbt_utils.fhir.care_team": [], "source.fhir_dbt_utils.fhir.claim": [], "source.fhir_dbt_utils.fhir.composition": [], "source.fhir_dbt_utils.fhir.condition": [], "source.fhir_dbt_utils.fhir.device": [], "source.fhir_dbt_utils.fhir.diagnostic_report": [], "source.fhir_dbt_utils.fhir.document_reference": [], "source.fhir_dbt_utils.fhir.encounter": [], "source.fhir_dbt_utils.fhir.episode_of_care": [], "source.fhir_dbt_utils.fhir.explanation_of_benefit": [], "source.fhir_dbt_utils.fhir.imaging_study": [], "source.fhir_dbt_utils.fhir.immunization": [], "source.fhir_dbt_utils.fhir.location": [], "source.fhir_dbt_utils.fhir.medication": [], "source.fhir_dbt_utils.fhir.medication_administration": [], "source.fhir_dbt_utils.fhir.medication_dispense": [], "source.fhir_dbt_utils.fhir.medication_request": [], "source.fhir_dbt_utils.fhir.observation": [], "source.fhir_dbt_utils.fhir.organization": [], "source.fhir_dbt_utils.fhir.patient": [], "source.fhir_dbt_utils.fhir.practitioner": [], "source.fhir_dbt_utils.fhir.practitioner_role": [], "source.fhir_dbt_utils.fhir.procedure": []}, "child_map": {"model.fhir_dbt_utils.MedicationStatement": [], "model.fhir_dbt_utils.ImagingStudy": [], "model.fhir_dbt_utils.MedicationDispense": [], "model.fhir_dbt_utils.DiagnosticReport": [], "model.fhir_dbt_utils.DocumentReference": [], "model.fhir_dbt_utils.Practitioner": [], "model.fhir_dbt_utils.Patient": ["analysis.fhir_dbt_utils.patient_processed"], "model.fhir_dbt_utils.Composition": [], "model.fhir_dbt_utils.ServiceRequest": [], "model.fhir_dbt_utils.Procedure": [], "model.fhir_dbt_utils.fhir_table_list": ["model.fhir_dbt_utils.AllergyIntolerance", "model.fhir_dbt_utils.Binary", "model.fhir_dbt_utils.CareTeam", "model.fhir_dbt_utils.Composition", "model.fhir_dbt_utils.Condition", "model.fhir_dbt_utils.DiagnosticReport", "model.fhir_dbt_utils.DocumentReference", "model.fhir_dbt_utils.Encounter", "model.fhir_dbt_utils.EpisodeOfCare", "model.fhir_dbt_utils.ImagingStudy", "model.fhir_dbt_utils.Location", "model.fhir_dbt_utils.Medication", "model.fhir_dbt_utils.MedicationAdministration", "model.fhir_dbt_utils.MedicationDispense", "model.fhir_dbt_utils.MedicationRequest", "model.fhir_dbt_utils.MedicationStatement", "model.fhir_dbt_utils.Observation", "model.fhir_dbt_utils.Organization", "model.fhir_dbt_utils.Patient", "model.fhir_dbt_utils.Person", "model.fhir_dbt_utils.Practitioner", "model.fhir_dbt_utils.PractitionerRole", "model.fhir_dbt_utils.Procedure", "model.fhir_dbt_utils.ServiceRequest"], "model.fhir_dbt_utils.PractitionerRole": [], "model.fhir_dbt_utils.EpisodeOfCare": [], "model.fhir_dbt_utils.Condition": [], "model.fhir_dbt_utils.MedicationAdministration": [], "model.fhir_dbt_utils.Binary": [], "model.fhir_dbt_utils.AllergyIntolerance": [], "model.fhir_dbt_utils.Person": [], "model.fhir_dbt_utils.Encounter": ["analysis.fhir_dbt_utils.encounter_processed"], "model.fhir_dbt_utils.Medication": [], "model.fhir_dbt_utils.Observation": ["analysis.fhir_dbt_utils.observation_processed"], "model.fhir_dbt_utils.Location": [], "model.fhir_dbt_utils.MedicationRequest": [], "model.fhir_dbt_utils.CareTeam": [], "model.fhir_dbt_utils.Organization": [], "analysis.fhir_dbt_utils.observation_processed": [], "analysis.fhir_dbt_utils.patient_processed": [], "analysis.fhir_dbt_utils.encounter_processed": [], "source.fhir_dbt_utils.fhir.AllergyIntolerance": [], "source.fhir_dbt_utils.fhir.Binary": [], "source.fhir_dbt_utils.fhir.CarePlan": [], "source.fhir_dbt_utils.fhir.CareTeam": [], "source.fhir_dbt_utils.fhir.Claim": [], "source.fhir_dbt_utils.fhir.Composition": [], "source.fhir_dbt_utils.fhir.Condition": [], "source.fhir_dbt_utils.fhir.Device": [], "source.fhir_dbt_utils.fhir.DiagnosticReport": [], "source.fhir_dbt_utils.fhir.DocumentReference": [], "source.fhir_dbt_utils.fhir.Encounter": [], "source.fhir_dbt_utils.fhir.EpisodeOfCare": [], "source.fhir_dbt_utils.fhir.ExplanationOfBenefit": [], "source.fhir_dbt_utils.fhir.ImagingStudy": [], "source.fhir_dbt_utils.fhir.Immunization": [], "source.fhir_dbt_utils.fhir.Location": [], "source.fhir_dbt_utils.fhir.Medication": [], "source.fhir_dbt_utils.fhir.MedicationDispense": [], "source.fhir_dbt_utils.fhir.MedicationAdministration": [], "source.fhir_dbt_utils.fhir.MedicationRequest": [], "source.fhir_dbt_utils.fhir.Observation": [], "source.fhir_dbt_utils.fhir.Organization": [], "source.fhir_dbt_utils.fhir.Patient": [], "source.fhir_dbt_utils.fhir.Practitioner": [], "source.fhir_dbt_utils.fhir.PractitionerRole": [], "source.fhir_dbt_utils.fhir.Procedure": [], "source.fhir_dbt_utils.fhir.allergy_intolerance": [], "source.fhir_dbt_utils.fhir.binary": [], "source.fhir_dbt_utils.fhir.care_plan": [], "source.fhir_dbt_utils.fhir.care_team": [], "source.fhir_dbt_utils.fhir.claim": [], "source.fhir_dbt_utils.fhir.composition": [], "source.fhir_dbt_utils.fhir.condition": [], "source.fhir_dbt_utils.fhir.device": [], "source.fhir_dbt_utils.fhir.diagnostic_report": [], "source.fhir_dbt_utils.fhir.document_reference": [], "source.fhir_dbt_utils.fhir.encounter": [], "source.fhir_dbt_utils.fhir.episode_of_care": [], "source.fhir_dbt_utils.fhir.explanation_of_benefit": [], "source.fhir_dbt_utils.fhir.imaging_study": [], "source.fhir_dbt_utils.fhir.immunization": [], "source.fhir_dbt_utils.fhir.location": [], "source.fhir_dbt_utils.fhir.medication": [], "source.fhir_dbt_utils.fhir.medication_administration": [], "source.fhir_dbt_utils.fhir.medication_dispense": [], "source.fhir_dbt_utils.fhir.medication_request": [], "source.fhir_dbt_utils.fhir.observation": [], "source.fhir_dbt_utils.fhir.organization": [], "source.fhir_dbt_utils.fhir.patient": [], "source.fhir_dbt_utils.fhir.practitioner": [], "source.fhir_dbt_utils.fhir.practitioner_role": [], "source.fhir_dbt_utils.fhir.procedure": []}, "group_map": {}, "semantic_models": {}}